<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\models\admin\Players;
use app\models\admin\Stadium;
use app\models\LoginForm;
use app\models\News;
use app\models\SignupForm;
use app\models\User;
use yii\filters\auth\CompositeAuth;
use app\components\HttpBearerAuthG4U;
use app\components\AuthG4U;
use yii\filters\auth\QueryParamAuth;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class StadiumsController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $locale;
    private $user;
    private $message;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                    } else {
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' =>  $this->error , 'message' => $this->message];
    }

    public function actionIndex()
    {
        $this->answer = Players::find()->asArray()->all();
    }

    public function actionAdd()
    {
        if ($this->user->access_level > AccessType::SUPER_ADMIN) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $stadium = new Stadium();
            foreach ($this->body as $k => $value) {
                if ($value == '') {
                    $this->error = true;
                    $this->message = 'Empty ' . $k . ' value';
                    return;
                } else {
                    $stadium->$k = $value;
                }
            }
            if ($stadium->save()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }
    public function actionDel($id)
    {
        if ($this->user->access_level > AccessType::SUPER_ADMIN) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $stadium = Stadium::findOne($id);
            if ($stadium->delete()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }

    public function actionList($name = null)
    {
        $where = '1';
        if ($name != null) {
            $where = 'title like "' . strip_tags(trim($name)) . '%"';
        }
        if($name == null) {
            $this->answer['apiKey'] = \Yii::$app->params['apiGoogleMapsKey'];
            $this->answer['list'] = Stadium::find()->select([
                'stadiums_id',
                'title',
                'address',
                'status'
            ])->where($where)->asArray()->all();
        }else{
            $this->answer = Stadium::find()->select([
                'stadiums_id',
                'title',
                'address',
                'status'
            ])->where($where)->asArray()->all();
        }
    }
}

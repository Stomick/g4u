<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\models\admin\AdminLeagues;
use app\models\admin\Asgmt;
use app\models\admin\Personal;
use app\models\Commands;
use app\models\Games;
use app\models\SubLeagues;
use app\models\Tournaments;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class AsgmtController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $message;
    private $user;
    private $locale;
    private $league_id;
    private $sub_league_id;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                        if (!$this->league_id = AdminLeagues::find()->select(['leagues_id as id'])->where(['user_id' => $this->user->id])->one()) {
                            $this->error = true;
                            $this->message = ErrorType::admin['not_permission'][$this->locale];
                        } else {
                            $this->league_id = $this->league_id['id'];
                            $this->sub_league_id = SubLeagues::find()->select(['sub_leagues_id as id'])->where(['leagues_id' => $this->league_id])->asArray()->all();
                        };
                    } else {
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex()
    {
        $this->answer = $this->sub_league_id;
    }

    public function actionList($gId = null)
    {
        if ($gId) {
            $where = ['league_id' => $this->league_id, 'game_id' => $gId];
        } else {
            $where = ['league_id' => $this->league_id];
        }

        $asmg = [];
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            foreach (Asgmt::find()->select(['personal_id'])->distinct('personal_id')->where($where)->all() as $k => $val) {
                $asmg[$k] = [
                    'personal' => Personal::find()->select([
                        'personal_id as id',
                        'photo',
                        'name',
                        'surename',
                        'patronymic',
                        'pt.type_ru as type'
                    ])
                        ->join('left join', 'personal_type as pt', 'pt.id=personals.type_id')
                        ->andWhere('personal_id=' . $val->personal_id)
                        ->asArray()
                        ->one()];
                $indG = 0;
                foreach (Asgmt::find()->select(['game_id', 'asgm_id'])->where(['personal_id' => $val->personal_id])->orderBy('created_at DESC')->all() as $g => $games) {
                    if ($game = Games::find()
                        ->where(['league_id' => $this->league_id, 'game_id' => $games->game_id])
                        ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                        ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                        ->one()) {
                        $asmg[$k]['games'][$indG++] = [
                            'asmgId' => $games->asgm_id,
                            'game' => [
                                'gameId' => $game->game_id,
                                'tour' => $game->tour,
                                'end' => $game->the_end,
                                'in' => Commands::find()->select([
                                    'title',
                                    'logo',
                                    'command_id'
                                ])->where(['command_id' => $game->command_id_in])->one(),
                                'out' => Commands::find()->select([
                                    'title',
                                    'logo',
                                    'command_id'
                                ])->where(['command_id' => $game->command_id_out])->one()]
                        ];
                    }
                }
            }
            $this->answer = $asmg;
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionPersonal($type = null, $name = null, $tied = null)
    {
        $where = '1';
        if ($tied != null) {
            $where = 'tied=' . $tied;
        }
        if ($name != null) {
            return $this->answer = Personal::find()->select([
                'personal_id as id',
                'photo',
                'name',
                'surename',
                'patronymic',
                'type_id',
                'pt.type_ru as type'

            ])
                ->join('inner join', 'personal_type as pt', 'pt.id=personals.type_id')
                ->andWhere('LOWER(surename) like "' . strtolower($name) . '%" or LOWER(name) like "' . strtolower($name) . '%" or LOWER(patronymic) like "' . strtolower($name) . '%"')
                ->andWhere($where)
                ->asArray()
                ->all();
        }

        if ($type == null) {
            return $this->answer = Personal::find()->select([
                'personal_id as id',
                'photo',
                'name',
                'surename',
                'patronymic',
                'type_id',
                'pt.type_ru as type'

            ])
                ->join('inner join', 'personal_type as pt', 'pt.id=personals.type_id')
                ->andWhere($where)
                ->asArray()
                ->all();
        } elseif ($type != null) {
            return $this->answer = Personal::find()->select([
                'personal_id as id',
                'photo',
                'name',
                'surename',
                'patronymic',
                'type_id',
                'pt.type_ru as type'

            ])
                ->join('inner join', 'personal_type as pt', 'pt.id=personals.type_id')
                ->andWhere($where)
                ->andWhere('pt.id=' . intval($type))
                ->asArray()
                ->all();
        }
    }

    public function actionGame($name = null)
    {
        if ($name != null) {
            foreach (Games::find()
                         ->where(['league_id' => $this->league_id])
                         ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                         ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                         ->andWhere('cm_out.title like "%' . $name . '%" or cm_in.title like "%' . $name . '%"')
                         ->orderBy('created_at')
                         ->all() as $k => $game) {
                $this->answer[$k] = [
                    'id' => $game->game_id,
                    'tour' => $game->tour,
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_in])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_out])->one()
                ];
            }
        }
    }

    public function actionAdd()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $asgmt = new Asgmt();
            if (isset($this->body['pers_id']) && isset($this->body['game_id'])) {
                $asgmt->personal_id = $this->body['pers_id'];
                $asgmt->game_id = $this->body['game_id'];
                $asgmt->league_id = $this->league_id;
                if ($asgmt->save()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionDel()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $game = Asgmt::find()->where(['asgm_id' => $this->body['id']])->one();
            if ($game->delete()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

}

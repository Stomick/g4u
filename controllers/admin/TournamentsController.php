<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\models\admin\AdminLeagues;
use app\models\admin\Seasons;
use app\models\Commands;
use app\models\Games;
use app\models\statistic\CommandPosInTour;
use app\models\statistic\CommandToTourn;
use app\models\statistic\GameOffer;
use app\models\statistic\PlayersInCommand;
use app\models\statistic\PlayersToGame;
use app\models\SubLeagues;
use app\models\SubTournaments;
use app\models\Tournaments;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\db\sqlite\Command;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class TournamentsController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $message;
    private $user;
    private $locale;
    private $league_id;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                        if (!$this->league_id = AdminLeagues::find()->select(['leagues_id as id'])->where(['user_id' => $this->user->id])->one()) {
                            $this->error = true;
                            $this->message = ErrorType::admin['not_permission'][$this->locale];
                        } else {
                            $this->league_id = $this->league_id['id'];
                        };
                    } else {
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex()
    {

    }

    public function actionList($slId)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $this->answer = Tournaments::find()
                ->select([
                    "tournament_id",
                    "sub_league_id",
                    "title",
                    "VK",
                    "FB",
                    "Youtube",
                    "game_to_rating",
                    "show_in_app"
                ])
                ->where(['sub_league_id' => $slId])
                ->asArray()
                ->all();
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionAdd()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $tournament = new Tournaments();

            foreach ($this->body as $k => $value) {
                if ($value == '' && $k != 'VK' && $k != 'FB' && $k != 'Youtube') {
                    $this->error = true;
                    $this->message = ErrorType::admin['not_permission'][$this->locale];
                } else {
                    $tournament->$k = $value;
                }
            }

            if ($tournament->save()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionAddseason()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $season = new Seasons();

            foreach ($this->body as $k => $value) {
                if ($value == '') {
                    $this->error = true;
                    $this->message = ErrorType::admin['not_permission'][$this->locale];
                } else {
                    $season->$k = $value;
                }
            }

            if ($season->save()) {

                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionGetseasons($tourId)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $this->answer = Seasons::find()
                ->select([
                    'title',
                    'season_id as seaid',
                    'status',
                ])
                ->where(['tournament_id' => intval($tourId)])
                ->asArray()
                ->all();
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionGetsubtour($seaId)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $this->answer = SubTournaments::find()
                ->select([
                    'sub_tournament_id as id',
                    'title',
                    'stat_type',
                    'rait_type',
                    'game_to_rating',
                    'parent',
                    'arhive',
                    'status',
                ])
                ->where(['season_id' => intval($seaId)])
                ->asArray()
                ->all();
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionAddsubtour()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $tournament = new SubTournaments();

            foreach ($this->body as $k => $value) {
                if ($value == '') {
                    $this->error = true;
                    $this->message = ErrorType::admin['not_permission'][$this->locale];
                    return;
                } else {
                    $tournament->$k = $value;
                }
            }

            if ($tournament->save()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionListcommands($subId)
    {
        $this->answer = CommandToTourn::find()
            ->select([
                'CONCAT(cm.title ," (", cit.name, ")") as title',
                'cm.logo',
                'cm.command_id'
            ])
            ->where(['sub_tournament_id' => $subId])
            ->join('inner join', 'commands as cm', 'cm.command_id=cm_to_tm.command_id')
            ->join('inner join', 'cities cit', 'cit.id=cm.city_id')
            ->asArray()
            ->all();
    }

    public function actionAddcommands()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $ComToTour = new CommandToTourn();
            if (isset($this->body['command_id']) && isset($this->body['sub_id'])) {
                $ComToTour->command_id = $this->body['command_id'];
                $ComToTour->sub_tournament_id = $this->body['sub_id'];
                if (CommandToTourn::find()->where(['command_id' => $this->body['command_id'], 'sub_tournament_id' => $this->body['sub_id']])->one()) {
                    $this->error = true;
                    $this->message = 'Command isset in tounament';
                    return;
                }
                if ($ComToTour->save()) {
                    $statick = new CommandPosInTour();
                    $statick->command_id = $ComToTour->command_id;
                    $statick->sub_tournament_id = $ComToTour->sub_tournament_id;
                    $statick->save();
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionDelcommands()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if (isset($this->body['command_id']) && isset($this->body['sub_id'])) {
                $ComToTour = CommandToTourn::find()->where(
                    [
                        'command_id' => $this->body['command_id'],
                        'sub_tournament_id' => $this->body['sub_id']
                    ])->one();

                if ($ComToTour->delete()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_delete[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionListgames($subId)
    {
        $tour = SubTournaments::find()->where(['sub_tournament_id' => intval($subId)])->one();
        $count = CommandToTourn::find()->where(['sub_tournament_id' => intval($subId)])->count();

        $this->answer['tour'] = self::getGames($subId);
        $this->answer['tcount'] = $tour->rounds * ($count - 1);
        $this->answer['rounds'] = $tour->rounds;
    }

    public function actionAutocomplite($subId, $r = null)
    {

        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if ($game = Games::find()->where(['sub_tournament_id' => intval($subId)])->all()) {
                foreach ($game as $g) {
                    $g->delete();
                }
            }
            $tour = SubTournaments::find()->where(['sub_tournament_id' => intval($subId)])->one();
            $count = CommandToTourn::find()->where(['sub_tournament_id' => intval($subId)])->count();
            if(Games::find()->where(['sub_tournament_id'=> $subId])->asArray()->one())
            {
                $this->error = true;
                $this->message = ErrorType::answer_false_autocomplite[$this->locale];
                return;
            }
            if ($tour->rounds * ($count - 1) <= 0) {
                $this->error = true;
                $this->message = ErrorType::answer_false_autocomplite[$this->locale];
                return;
            }
            if ($r != null) {
                $tour->rounds = $r;
                $tour->update();
            }
            $retGames = [];
            $game_in = $game_out = CommandToTourn::find()
                ->select([
                    'command_id as id'
                ])
                ->where(['sub_tournament_id' => $subId])
                ->asArray()
                ->all();

            $c = count($game_in);

            $index = 0;

            for ($out = 0; $out < $c;) {
                $retGames[$index++] = [
                    'in' => intval($game_out[$out++]['id']),
                    'out' => intval($game_out[$out++]['id'])
                ];
            }


            $c = $c / 2;

            $tourn = $count - 1;
            $tours[0] = $retGames;
            $tt = [];
            for ($r = 0; $r < $tour->rounds; $r++) {
                for ($i = 1; $i < ($tourn) * ($r + 1); $i++) {
                    $tours[$i] = $tours[$i - 1];

                    $tmp = $tours[$i][0]['in'];

                    for ($j = 1; $j < $c; $j++) {
                        $tours[$i][$j - 1]['in'] = $tours[$i][$j]['in'];
                    }
                    $tours[$i][$c - 1]['in'] = $tmp;

                    for ($j = 0; $j < count($retGames); $j++) {
                        $tours[$i][$j] = [
                            'in' => $tours[$i - 1][$j]['out'],
                            'out' => $tours[$i - 1][$j]['in']];
                    }
                    shuffle($tours[$i]);
                }
            }
            $this->answer = $tours;

            foreach ($tours as $k => $t) {
                foreach ($t as $g) {
                    $game = new Games();
                    $game->command_id_out = $g['out'];
                    $game->command_id_in = $g['in'];
                    $game->sub_tournament_id = $subId;
                    $game->league_id = $this->league_id;
                    $game->tour = $k + 1;
                    $game->save();
                }
            };
            $this->answer['tour'] = self::getGames($subId, 1, $tour->rounds * ($count - 1));
            $this->answer['tcount'] = $tour->rounds * ($count - 1);
            $this->answer['rounds'] = $tour->rounds;
        }
    }

    private function getGames($subId, $andwhere = 1, $tour = 0)
    {
        $tours = [];
        $indTour = 0;
        $ret = [];
        $maxTour = 0;
        foreach (Games::find()
                     ->where(['sub_tournament_id' => $subId, 'league_id' => $this->league_id])
                     ->andWhere($andwhere)
                     ->orderBy('tour')->all() as $k => $game) {
            $maxTour < $game->tour ? $maxTour = $game->tour : $game->tour;
            $tours[$indTour++] = [
                'game_id' => $game->game_id,
                'tour' => $game->tour,
                'the_end' => $game->the_end,
                'date' => $game->date,
                'in' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')
                    ->where(['command_id' => $game->command_id_in])->one(),
                'out' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')->where(['command_id' => $game->command_id_out])->one()
            ];
        }
        $ret[] = [];
        foreach ($tours as $k => $tour) {
            if (!isset($ret[$tour['tour'] - 1])) {
                $ret[$tour['tour'] - 1] = [];
            }
            array_push($ret[$tour['tour'] - 1], $tour);
        }
        $ind = 0;
        $ret2 = [];
        foreach ($ret as $k => $tour) {
            $ret2[$ind++] = $tour;
        }
        return $ret2;
    }

    public function actionClearautocomplite($subId)
    {

        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if (!$game = Games::find()->where(['sub_tournament_id' => intval($subId)])->all()) {
                foreach ($game as $g) {
                    if (!$g->delete()) {
                        $this->error = true;
                        $this->message = ErrorType::answer_false_delete[$this->locale];
                    }
                }

            }
            return $this->answer = ErrorType::answer_true_delete[$this->locale];
        }
    }
    public function actionGetofftimegames($subId)
    {

        $this->answer = self::getGames($subId, ['games.date' => NULL]);

    }

    public function actionAddtimetogames()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {

            if (isset($this->body['gameList']) && isset($this->body['date'])) {
                foreach ($this->body['gameList'] as $k => $v) {
                    $g = Games::findOne($v);
                    $g->date = $this->body['date'];
                    if (!$g->update()) {
                        $this->error = true;
                        $this->message = ErrorType::not_update[$this->locale];
                        return;
                    }
                }
                $this->answer = true;
                $this->message = ErrorType::answer_true_update[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionAddgame()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $game = new Games();
            if (isset($this->body['command_id_in']) && isset($this->body['command_id_out'])) {

                $game->command_id_out = $this->body['command_id_out'];
                $game->command_id_in = $this->body['command_id_in'];
                $game->sub_tournament_id = $this->body['sub_id'];
                $game->league_id = $this->league_id;
                $game->tour = intval($this->body['tour']);
                if ($game->save()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add_game_to_tournament[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::answer_false_add_game_to_tournament[$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionAddgameoffer()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if ($game = Games::findOne($this->body['game_id'])) {
                foreach ($this->body as $k => $v) {
                    $game->$k = $v;
                }

                if ($game->update()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionGetgame($gId)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $this->answer = Games::find()->where(['game_id' => $gId])->asArray()->one();
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionDelgame()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if ($game = Games::find()->where(['game_id' => $this->body['game_id']])->one()) {
                if ($game->the_end != 0) {
                    $this->error = true;
                    $this->message = "Your not can del this game";
                    return;
                }
                if ($game->delete()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_delete[$this->locale];
                    return;
                }
            }
            $this->error = true;
            $this->message = ErrorType::answer_false_delete[$this->locale];

        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionConsist($id)
    {
        $playerIn = [];
        $playerOut = [];
        if ($game = Games::findOne($id)) {
            foreach (PlayersInCommand::find()->select(
                [
                    'pl.player_id as plid',
                    'CONCAT(pl.name, " " , pl.surename) as name',
                    'number',
                    'ps.type'
                ])
                         ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                         ->join('inner join', 'position as ps', 'ps.position_id=pl.position_id')
                         ->where(['command_id' => $game->command_id_in])->orderBy('name')->asArray()->all() as $p => $pl) {
                $pl['status'] = PlayersToGame::find()->where(['player_id' => $pl['plid'], 'game_id' => $id])->one() == null ? false : true;
                $pl['comm'] = 'in';
                $playerIn[$p] = $pl;

            }
            foreach (PlayersInCommand::find()->select(
                [
                    'pl.player_id as plid',
                    'CONCAT(pl.name, " " , pl.surename) as name',
                    'number',
                    'ps.type'
                ])
                         ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                         ->join('inner join', 'position as ps', 'ps.position_id=pl.position_id')
                         ->where(['command_id' => $game->command_id_out])->orderBy('name')->asArray()->all() as $p => $pl) {
                $pl['status'] = PlayersToGame::find()->where(['player_id' => $pl['plid'], 'game_id' => $id])->one() == null ? false : true;
                $pl['comm'] = 'out';
                $playerOut[$p] = $pl;

            }

            $this->answer = [
                'in' => $playerIn,
                'out' => $playerOut
            ];
        }else{
            $this->error = true;
            $this->message = 'Game not found';
        }
    }

    public function actionUpdateconsist($id)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            PlayersToGame::deleteAll(['game_id' => $id]);
            foreach ($this->body['listPlIn'] as $pl) {
                $plToGame = PlayersToGame::find()->where(['player_id' => $pl, 'game_id' => $id])->one();
                if (!$plToGame && $pl['status'] == 'true') {
                    $plToGame = new PlayersToGame();
                    $plToGame->player_id = $pl['plid'];
                    $plToGame->game_id = $id;
                    $plToGame->save();
                }
            }
            foreach ($this->body['listPlOut'] as $pl) {
                $plToGame = PlayersToGame::find()->where(['player_id' => $pl, 'game_id' => $id])->one();
                if (!$plToGame && $pl['status'] == 'true') {
                    $plToGame = new PlayersToGame();
                    $plToGame->player_id = $pl['plid'];
                    $plToGame->game_id = $id;
                    $plToGame->save();
                }
            }
            $this->answer = true;
            $this->message = ErrorType::answer_true_add[$this->locale];
        } else {
            $this->error = true;
            $this->message = ErrorType::not_add[$this->locale];
        }
    }
    public function actionSetstatus($id){
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if($tournament = Tournaments::findOne($id)){
                $tournament->show_in_app = $tournament->show_in_app == 0 ? 1:0;
                if($tournament->update()){
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_update[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_update[$this->locale];
                }
            }
        }else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }
    public function actionSetseasonstatus($id){
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if($season = Seasons::findOne($id)){
                $season->status = $season->status == 0 ? 1:0;
                if($season->update()){
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_update[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_update[$this->locale];
                }
            }
        }else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionSetsubtourstatus($id){
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            if($subtour = SubTournaments::findOne($id)){
                $subtour->status = $subtour->status == 0 ? 1:0;
                if($subtour->update()){
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_update[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_update[$this->locale];
                }
            }
        }else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }
}

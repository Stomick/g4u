<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\components\UploadImage;
use app\models\admin\MergePersonal;
use app\models\admin\MergePlayers;
use app\models\admin\Players;
use app\models\City;
use app\models\Commands;
use app\models\statistic\PlayersInCommand;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class CommandsController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $message;
    private $user;
    private $locale;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                    } else {
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex($cId)
    {
        $this->answer = Commands::find()
            ->select([
                'city_id',
                'command_id',
                'country_id',
                'logo',
                'state',
                'color_in',
                'color_out',
                'commands.status',
                'sub_command_id as sub_id',
                'sub_command_id',
                'title',
                "CONCAT(pl.name, ' ' , pl.surename , ' ' , pl.patronymic , ' ( ', IF(pl.status=\"player\",\"Игрок\",\"Капитан\"),' )') as name",
                '(SELECT title from commands where command_id=sub_id ) as subtitle'
            ])
            ->where(
                ['command_id' => $cId]
            )->join('left join', 'players pl', 'pl.player_id=commands.player_id')
            ->asArray()->one();
        $this->answer['number'] = [];
        $number = [];
        for ($i=0 ; $i< 99;){
            $number[$i++] = $i;
        }

        $this->answer['players'] = [];
        foreach (PlayersInCommand::find()->select([
                        "pl.player_id as pId",
                        "pl.name",
                        "pl.surename",
                        "pl.patronymic",
                        "pl.photo",
                        "number",
                        "position.type as position",
                    ])
                     ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                     ->join('inner join', 'position', 'position.position_id=pl.position_id')
                     ->where(['command_id' => $cId])->asArray()->all() as $k => $pl) {
            for($i = 0; $i< count($number); $i++){
                if($pl['number'] == $number[$i]){
                    array_splice($number,$i,1);
                };
            }
            $this->answer['players'][$k] = $pl;
        }
        $this->answer['number'] = $number;
    }

    public function actionListpl($name , $cId)
    {
        $n = strip_tags(trim($name));
        $ret = [];
        if(strlen($n) >= 3) {
            $andwhere = 'name like "' . $n . '%"';
            $andwhere .= 'or surename like "' . $n . '%"';
            $andwhere .= 'or patronymic like "' . $n . '%"';
            $andwhere .= 'and ptc.number IS null';
            $ret = Players::find()
                ->select([
                    "players.player_id plId",
                    "ptc.number",
                    "name",
                    "surename",
                    "patronymic",
                    //"photo",
                    "position.type as position",
                ])
                ->join('inner join', 'position', 'position.position_id=players.position_id')
                ->join('left join', 'pl_to_com ptc', 'ptc.player_id=players.player_id and ptc.command_id=' . $cId)
                ->where($andwhere)
                ->asArray()
                ->all();
        }
        $this->answer = $ret;
    }

    public function actionAddpl($cId)
    {
        if(isset($this->body['number']) && isset($this->body['plId'])){
            $cmp = new PlayersInCommand();
            $cmp->command_id=$cId;
            $cmp->player_id=$this->body['plId'];
            $cmp->number=$this->body['number'];
            if(isset($this->body['posId'])) {
                $cmp->position_id = $this->body['posId'];
            }else{
                $pl = Players::findOne($this->body['plId']);
                $cmp->position_id = $pl->position_id;
            }
            if($cmp->save()){
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            }else{
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }

    public function actionDelpl($cId , $plId)
    {
            $cmp = PlayersInCommand::find()->where(['player_id' => $plId , 'command_id' => $cId])->one();
            if($cmp->delete()){
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            }else{
                $this->error = true;
                $this->message = ErrorType::answer_false_delete[$this->locale];
            }
    }


    public function actionDisable($cId)
    {
        if ($comm = Commands::findOne($cId)) {
            $comm->state = 'off';
            if ($comm->update()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_update[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_update[$this->locale];
            }
        }
    }
    private function getCommands($limit, $offset , $name , $cityId){
        $where = 1;
        if($name){
            $where = 'title LIKE "' . $name . '%"';
        }
        if($cityId) {
            $where == 1 ? $where = 'commands.city_id=' . $cityId : $where = ' AND commands.city_id=' . $cityId;
        }
        return Commands::find()->select(['command_id','CONCAT(title ," (", cit.name, ")") as title', 'logo' , 'state'])
            ->join('left join', 'cities cit', 'cit.id=commands.city_id')
            ->orderBy('title')
            ->limit($limit)
            ->offset($offset)
            ->where($where)
            ->asArray()->all();
    }

    public function actionListall($limit = 15, $offset = 0 , $name = null , $citId = null)
    {
        $com = self::getCommands($limit,$offset * $limit, $name , $citId);
        $this->answer['all'] = $com;
        $cityIdS =[];
        foreach (Commands::find()->select(['city_id'])->distinct()->all() as $k => $c) {
            $cityIdS[$k] = City::find()->select(['name' , 'id as citId'])->where(['id'=>$c->city_id])->asArray()->one();
        }

        $this->answer['filters'] = [
            'city' => $cityIdS,
            'prev' => $offset == 0 ? null : $offset - 1,
            'current' => $offset,
            'next' => count($com) == $limit ? $offset+1 : null
        ];
    }

    public function actionList($name = null, $sub = null , $limits = null , $offset = null)
    {
        $where = "1";
        if (strlen($name) >= 3) {
            $where = 'title LIKE "' . $name . '%"';
        }

        if ($name != null && intval($sub) == 1) {
            $where = 'title LIKE "' . $name . '%" AND sub_command_id IS NULL';
        }

        $this->answer = Commands::find()
            ->select([
                'CONCAT(title ," (", cit.name, ")") as title',
                'logo',
                'command_id',
                'state'
            ])
            ->join('inner join', 'cities cit', 'cit.id=commands.city_id')
            ->where($where)
            //->andWhere('state = "on"')
            ->asArray()
            ->all();
    }

    public function actionAdd()
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $command = new Commands();
            foreach ($this->body as $k => $value) {
                if ($value == '' && $k != 'sub_command_id' && $k != 'player_id' && $k != 'country_id' && $k != 'color_in' && $k!= 'color_out') {
                    $this->error = true;
                    $this->message = ErrorType::command_error['error'][$this->locale] . " " . ErrorType::command_error[$k][$this->locale];
                    return;
                } elseif ($k == 'logo') {
                    $command->logo = UploadImage::save_image($value, $k, 'img/commands/' . \Yii::$app->security->generateRandomString(32) . '/');
                } else {
                    $command->$k = $value;
                }
            }
            if ($command->player_id != null && ($player = Players::findOne($command->player_id)) != null) {
                $player->status = 'capitan';
                $player->update();

            }

            if ($command->save()) {
                if ($command->sub_command_id != null) {
                    if ($comm = Commands::findOne($command->sub_command_id)) {
                        $comm->sub_command_id = $command->command_id;
                        $comm->update();
                    }
                }
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }

    public function actionUpdate($cId)
    {
        if ($this->user->access_level <= AccessType::LIGA_ADMIN) {
            $command = Commands::findOne($cId);

            foreach ($this->body as $k => $value) {
                if ($value == '' && $k != 'sub_command_id' && $k != 'player_id') {
                    $this->error = true;
                    $this->message = ErrorType::command_error['error'][$this->locale] . " " . ErrorType::command_error[$k][$this->locale];
                    return;
                } elseif ($k == 'logo') {
                    $command->logo = UploadImage::save_image($value, $k, 'img/commands/' . \Yii::$app->security->generateRandomString(32) . '/');
                } else {
                    $command->$k = $value;
                }
            }

            if ($command->player_id != null && ($player = Players::findOne($command->player_id)) != null) {
                $player->status = 'capitan';
                $player->update();
                $plTocomm = new PlayersInCommand();
                $plTocomm->player_id = $player->player_id;
                $plTocomm->command_id = $command->command_id;
                $plTocomm->number = 0;
                $plTocomm->save();


            }
            if ($command->update()) {
                if ($command->sub_command_id != null) {
                    if ($comm = Commands::findOne($command->sub_command_id)) {
                        $comm->sub_command_id = $command->command_id;
                        $comm->update();
                    }
                }
                $this->answer = true;
                $this->message = ErrorType::answer_true_update[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
        }
    }
}

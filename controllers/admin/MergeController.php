<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\models\admin\MergePersonal;
use app\models\admin\MergePlayers;
use app\models\admin\Personal;
use app\models\admin\Players;
use app\models\Commands;
use app\models\LoginForm;
use app\models\News;
use app\models\SignupForm;
use app\models\User;
use yii\filters\auth\CompositeAuth;
use app\components\HttpBearerAuthG4U;
use app\components\AuthG4U;
use yii\filters\auth\QueryParamAuth;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class MergeController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $locale;
    private $user;
    private $message;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                    }else{
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' =>  $this->error , 'message' => $this->message];
    }

    public function actionIndex()
    {
        $ret = [];
        $ret = array_merge($ret, $utplayer = MergePersonal::find()->select([
            "utp_id",
            "CONCAT(ps.name, ' ' , ps.surename , ' ' , ps.patronymic , ' ( ' , pt.type_ru, ' )') as name",
            "CONCAT(user.nickname , ' (' , user.email, ')') as nickname",
            "user_to_personal.type",
            "moder",
        ])
            ->join('inner join', 'user', 'user.id=user_to_personal.user_id')
            ->join('inner join', 'personals as ps', 'ps.personal_id=user_to_personal.personal_id')
            ->join('inner join', 'personal_type as pt', 'pt.id=ps.type_id')
            ->asArray()->all());
        $ret = array_merge($ret, $utpersonal = MergePlayers::find()->select([
            "utp_id",
            "CONCAT(pl.name, ' ' , pl.surename , ' ' , pl.patronymic , ' ( ', IF(pl.status=\"player\",\"Игрок\",\"Капитан\"),' )') as name",
            "CONCAT(user.nickname , ' (' , user.email, ')') as nickname",
            "user_to_players.type",
            "moder",
        ])
            ->join('inner join', 'user', 'user.id=user_to_players.user_id')
            ->join('inner join', 'players pl', 'pl.player_id=user_to_players.player_id')
            ->asArray()->all());
        return $this->answer = $ret;

    }

    public function actionPersonal()
    {
        $mergePers = new MergePersonal();

        if ($this->body['usId'] != null && $this->body['persId'] && !$mergePers::findOne(['user_id' => $this->body['usId']])) {
            $mergePers->user_id = intval($this->body['usId']);
            $mergePers->personal_id = intval($this->body['persId']);
            //return $this->answer = $this->user;
            if ($this->user->access_level <= AccessType::CAPITAN) {
                $mergePers->moder = 1;
                $user = User::findOne($mergePers->user_id);
                $pers = Personal::findOne($mergePers->personal_id);
                $user->tied = 1;
                $pers->tied = 1;
                $user->update();
                $pers->update();

            }
            if ($mergePers->save()) {
                $this->answer = true;
                $this->message = ErrorType::merge['true'][$this->locale];
            } else {
                $this->error = true ;
                $this->message = ErrorType::merge['false'][$this->locale];
            }

        } else {
            $this->error = true;
            $this->message = ErrorType::merge['false'][$this->locale];
        }
    }

    public function actionPlayer()
    {
        $mergePers = new MergePlayers();
        if ($this->body['usId'] != null && $this->body['playerId'] && !$mergePers::findOne(['user_id' => $this->body['usId']])) {
            $mergePers->user_id = intval($this->body['usId']);
            $mergePers->player_id = intval($this->body['playerId']);
            if ($this->user->access_level <= AccessType::CAPITAN) {
                $mergePers->moder = 1;
                $user = User::findOne($mergePers->user_id);
                $pers = Players::findOne($mergePers->player_id);
                $user->tied = 1;
                $pers->tied = 1;
                $user->update();
                $pers->update();
            }
            if ($mergePers->save()) {
                $this->answer = true;
                $this->message = ErrorType::merge['true'][$this->locale];
            } else {
                $this->error = true ;
                $this->message = ErrorType::merge['false'][$this->locale];
            }

        } else {
            $this->error = true;
            $this->message = ErrorType::merge['false'][$this->locale];
        }
    }

    public function actionUpdate()
    {
        if ($this->user->access_level <= AccessType::CAPITAN) {
            foreach ($this->body as $k => $value){
                if($value == ''){
                    $this->error = true;
                    $this->message = ErrorType::merge['false'][$this->locale];
                    return ;
                }
            }
            switch ($this->body['type']) {
                case 'player':
                    $model = MergePlayers::findOne($this->body['id']);
                    $pers = Players::findOne($model->player_id);
                    break;
                case 'personal':
                    $model = MergePersonal::findOne($this->body['id']);
                    $pers = Personal::findOne($model->personal_id);
                    break;
                default:
                    $this->error = true;
                    $this->message = ErrorType::merge['false'][$this->locale];
                    return ;
            }

            if ($this->body['confirm'] == 1) {
                $user = User::findOne($model->user_id);
                $user->tied = 1;
                $pers->tied = 1;
                $user->update();
                $pers->update();
                $model->moder = 1;
                if ($model->update()) {
                    $this->answer = true;
                    $this->message = ErrorType::merge['true'][$this->locale];
                } else {
                    $this->error = true ;
                    $this->message = ErrorType::merge['false'][$this->locale];
                }
            } elseif ($this->body['confirm'] == 0) {
                $user = User::findOne($model->user_id);
                $user->tied = 0;
                $pers->tied = 0;
                if(isset($pers->status)){
                    if($pers->status == 'capitan'){
                        $comm = Commands::find()->where(["player_id"=> $pers->player_id])->one();
                        $comm->player_id = null;
                        $comm->update();
                    }
                    $pers->status = 'player';
                }
                $user->update();
                $pers->update();
                $model->moder = 0;
                if ($model->delete()) {
                    $this->answer = true;
                    $this->message = ErrorType::merge['true'][$this->locale];
                } else {
                    $this->error = true ;
                    $this->message = ErrorType::merge['false'][$this->locale];
                }
            }
        } else {
            $this->error = true;
            $this->message = ErrorType::merge['false'][$this->locale];
            return ;
        }
    }
}

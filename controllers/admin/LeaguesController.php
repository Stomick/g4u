<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\components\UploadImage;
use app\models\admin\AdminFrinchise;
use app\models\admin\AdminLeagues;
use app\models\admin\Franchise;
use app\models\City;
use app\models\Leagues;
use app\models\admin\Players;
use app\models\LoginForm;
use app\models\News;
use app\models\SignupForm;
use app\models\SubLeagues;
use app\models\User;
use yii\filters\auth\CompositeAuth;
use app\components\HttpBearerAuthG4U;
use app\components\AuthG4U;
use yii\filters\auth\QueryParamAuth;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class LeaguesController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $message;
    private $user;
    private $locale;
    private $league;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        if ($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                        $this->league = $this->user->league_id;
                    } else {
                        $this->error = true;
                        $this->message = 'User not fount';
                        return;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex($name = null)
    {
        switch ($this->user->access_level) {
            case 0:
            case AccessType::GLOBAL_ADMIN:
            case AccessType::SUPER_ADMIN:
            case AccessType::LIGA_ADMIN:
                $franchAdmin = AdminFrinchise::find()->where(['user_id' => $this->user->id])->one();
                $this->answer = Leagues::find()
                    ->where(['franchise_id' => $franchAdmin->franchise_id])
                    ->select(['leagues_id as id', 'title', 'status', 'country_id as country'])
                    ->asArray()
                    ->all();
                break;
            case AccessType::USER:
                if ($name == null) {
                    $this->answer = Leagues::find()->select(['leagues_id as id', 'title', 'status'])->asArray()->all();
                } else {
                    $this->answer = Leagues::find()->select(['leagues_id as id', 'title', 'status'])->andWhere('title like "%' . $name . '%"')->asArray()->all();
                }
                break;
        }

    }

    public function actionEdit($id)
    {
        if ($this->user->access_level >= AccessType::SUPER_ADMIN && $this->league != $id) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $liga = Leagues::find()->where(['leagues_id' => $id])->asArray()->one();
            $pers = [];
            foreach (AdminLeagues::find()->where(['leagues_id' => $id])->all() as $k => $admin) {
                $pers[$k] = User::find()->select(['id', 'nickname', 'email'])->where(['id' => $admin->user_id])->asArray()->one();
            }
            $this->answer = [
                'info' => $liga,
                'personal' => $pers
            ];
        }

    }

    public function actionAddadmin($id)
    {
        if ($this->user->access_level >= AccessType::SUPER_ADMIN && $this->league != $id) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $liga = new AdminLeagues();
            $liga->leagues_id = intval($id);
            $liga->user_id = $this->body['usId'];
            if ($liga->save()) {
                if($user = User::findOne($liga->user_id)){
                    $user->type = 'admin';
                    $user->league_id = $liga->leagues_id;
                    $user->access_level = AccessType::LIGA_ADMIN;
                    if($user->update()){
                        $this->answer = true;
                        $this->message = ErrorType::answer_true_add[$this->locale];
                    }else{
                        $liga->delete();
                        $this->error = true;
                        $this->message = ErrorType::not_add[$this->locale];
                    }
                }else{
                    $liga->delete();
                    $this->error = true;
                    $this->message = ErrorType::user_error[$this->locale];
                }
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }

    public function actionDeladmin($id)
    {
        if ($this->user->access_level >= AccessType::SUPER_ADMIN && $this->league != $id) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            if ($liga = AdminLeagues::find()->where(['leagues_id' => $id, 'user_id' => $this->body['usId']])->one()) {
                if ($liga->delete()) {
                    if ($user = User::findOne($liga->user_id)) {
                        $user->type = 'user';
                        $user->league_id = $liga->leagues_id;
                        $user->access_level = AccessType::USER;
                        if ($user->update()) {
                            $this->answer = true;
                            $this->message = ErrorType::answer_true_update[$this->locale];
                        } else {
                            $liga->delete();
                            $this->error = true;
                            $this->message = ErrorType::not_update[$this->locale];
                        }
                    } else {
                        $liga->delete();
                        $this->error = true;
                        $this->message = ErrorType::user_error[$this->locale];
                    }
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        }
    }

    public function actionAdd()
    {
        if ($this->user->access_level >= AccessType::SUPER_ADMIN) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $liga = new Leagues();
            $franchAdmin = AdminFrinchise::find()->where(['user_id' => $this->user->id])->one();
            $franch = Franchise::find()->where(['franchise_id' => $franchAdmin->franchise_id])->one();
            foreach ($this->body as $k => $value) {
                if ($value == '' && $k != 'franchise_id' && $k != 'status' && $k != 'description') {
                    $this->error = true;
                    $this->message = ErrorType::leagues['error'][$this->locale] . ' ' . ErrorType::leagues[$k][$this->locale];
                    return;
                }
            }
            if (isset($this->body['name'])) {
                $liga->title = $franch->name . ' ' . $this->body['name'];
                $liga->status = $this->body['status'];
                $liga->country_id = $this->body['country_id'];
                $liga->description = $this->body['description'] ? strip_tags($this->body['description']) : null;
                $liga->photo = UploadImage::save_image($this->body['photo'], 'league', 'img/league/' . date("Y-m-d_His") . '/');

                $liga->franchise_id = $franchAdmin == null ? 1 : $franchAdmin->franchise_id;

                if ($liga->save()) {
                    $lta = new AdminLeagues();
                    $lta->leagues_id = $liga->leagues_id;
                    $lta->user_id = $this->user->id;
                    $lta->save();
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        }
    }

    public function actionAddsub()
    {
        if ($this->user->access_level > AccessType::LIGA_ADMIN) {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            $liga = new SubLeagues();
            $franchAdmin = AdminFrinchise::find()->where(['user_id' => $this->user->id])->one();
            $franch = Franchise::find()->where(['franchise_id' => $franchAdmin->franchise_id])->one();
            foreach ($this->body as $k => $value) {
                if ($value == '' && $k != 'status') {
                    $this->error = true;
                    $this->message = ErrorType::sub_leagues['error'][$this->locale] . ' ' . ErrorType::sub_leagues[$k][$this->locale];
                    return;
                }
            }
            if (isset($this->body['name'])) {
                $liga->title = $franch->name . ' ' . $this->body['name'];
                $liga->status = $this->body['status'];
                $liga->city_id = $this->body['city_id'];
                $liga->leagues_id = $this->body['league_id'];
                if ($liga->save()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        }
    }
}

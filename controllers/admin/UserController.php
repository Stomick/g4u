<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers\admin;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\models\admin\AdminFrinchise;
use app\models\admin\AdminLeagues;
use app\models\admin\Franchise;
use app\models\Leagues;
use app\models\LoginForm;
use app\models\SignupForm;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\filters\ContentNegotiator;
use yii\rest\Controller;
use yii\web\Response;

class UserController extends Controller
{
    private $answer = [];
    private $error = false;
    private $body;
    private $message;
    private $user;
    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function actionLogin()
    {
        $login = new LoginForm();
        if(isset($this->body['email']) && isset($this->body['password'])) {
            $login->email    = $this->body['email'];
            $login->password = $this->body['password'];
            if ( $user = $login->login() ) {
                $status = 'Пользователь';
                switch ($user->access_level){
                    case AccessType::GLOBAL_ADMIN:
                        break;
                    case AccessType::SUPER_ADMIN:
                        $franch = Franchise::find()->where(['admin_franchise.user_id' => $user->id])
                            ->join('inner join' , 'admin_franchise', 'franchise.franchise_id=admin_franchise.franchise_id')
                            ->select(['franchise.name as name'])->one();
                        $status = $franch->name .' - ' . $user->nickname;
                        break;
                    case AccessType::LIGA_ADMIN:
                        $liga = Leagues::find()->where(['admin_leagues.user_id' => $user->id])
                            ->join('inner join' , 'admin_leagues', 'leagues.leagues_id=admin_leagues.leagues_id')
                            ->select(['leagues.title as name'])->asArray()->one();
                        $status = $liga['name'] .' - ' . $user->nickname;
                        break;
                }

                $this->answer = [ 'token' => $user->auth_key, 'type'=>$user->type , 'status' => $status];
                $this->message = '';
            }else{
                $this->error   = true;
                $this->message = (User::findByEmail($this->body['email']) != null ? ErrorType::err_passwd[$this->body['lang']] : ErrorType::err_emeil[$this->body['lang']]);
            }
        }else {
            $this->error   = true;
            $this->message = 'not isset email or password';
        }
    }

    public function actionProfile()
    {
        $this->answer = User::find()->where(['id' => (\Yii::$app->user->getId())])->select(['id', 'nickname', 'locale'])->asArray()->one();
    }

    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        $accept = \Yii::$app->request->getHeaders()->get('Authorization');
        if( $accept != null && $action->id != 'login') {
            if(is_array($arr = explode(' ', $accept))) {

                if(!$this->user = User::findIdentityByAccessToken(explode(' ', $accept)[1])){
                    $this->error = true;
                    $this->message = 'User not fount';
                    return;
                }

            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex()
    {
            $this->answer = User::find()
                ->where(['id' => $this->user->id])
                ->select(['id', 'nickname', 'locale'])
                ->asArray()->one();
    }

    public function actionList($name=null , $tied = null)
    {
        $where = 1;
        if($tied != null){
            $where = 'tied=' . $tied;
        }
        if($name == null) {
            return $this->answer = User::find()->select(['id', 'nickname', 'locale'])->asArray()->all();
        }else{
            return $this->answer = User::find()
                ->andWhere('LOWER(nickname) like "'.strip_tags(strtolower($name)).'%"' . ' or LOWER(email) like "'.strip_tags(strtolower($name)).'%"')
                ->andWhere($where)
                ->select(['id', 'nickname' ])
                ->asArray()
                ->all();
        }
    }
}

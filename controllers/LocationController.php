<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;

use app\models\City;
use app\models\Country;
use app\models\News;
use app\components\HttpBearerAuthG4U;

use app\models\Region;
use app\models\User;
use yii\filters\ContentNegotiator;
use yii\rest\Controller;
use yii\web\Response;

class LocationController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $locale;
    private $message;
    private $user;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['country'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }

        if($accept = \Yii::$app->request->getHeaders()->get('Authorization')) {
            if ($arr = explode(' ', $accept)) {
                if (is_array($arr) && count($arr) > 0) {
                    if ($this->user = User::findIdentityByAccessToken($arr[1])) {
                        $this->locale = $this->user->app_loc;
                    }
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex()
    {
        $this->answer = News::find()->asArray()->all();
    }

    public function actionGetadmincountry()
    {
        if ($this->user->type != 'global') {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            return $this->answer = Country::find()->select([
                'nicename',
                'id',
                'enable'
            ])->asArray()->all();
        }
    }

    public function actionSetcountrystatus()
    {
        if ($this->user->type != 'global') {
            $this->error = true;
            $this->message = ErrorType::admin['not_permission'][$this->locale];
            return;
        } else {
            if ($country = Country::find()->where(['id' => $this->body['id']])->one()) {
                $country->enable = $country->enable == 0 ? 1 : 0;
                if($country->update()){
                    $this->answer = true;
                    $this->message = $country->enable == 1 ? ErrorType::country_stus_on[$this->locale] : ErrorType::country_stus_off[$this->locale];
                }else {
                    $this->error = true;
                    $this->message = ErrorType::not_update[$this->locale];
                }
            } else {
                $this->error = true;
                $this->message = ErrorType::not_found[$this->locale];
            }
        }
    }

    public function actionCountry($name = null, $id = null)
    {
        if ($name != null) {
            $this->answer = Country::find()
                ->select(['id', 'nicename as name', 'iso3', 'CONCAT(CONCAT("/image/flags/" , iso),".png") as flag'])
                ->andWhere('LOWER(`name`) like "' . trim(strtolower($name)) . '%"')
                ->where([['enable' => 1]])
                ->asArray()
                ->all();
        } elseif ($id != null) {
            $this->answer = Country::find()
                ->select(['id', 'nicename as name', 'iso3', 'CONCAT(CONCAT("/image/flags/" , iso),".png") as flag'])
                ->where(['id' => intval($id), 'enable' => 1])
                ->asArray()
                ->one();
        } else {
            $this->answer = Country::find()
                ->select(['id', 'nicename as name', 'iso', 'iso3', 'CONCAT(CONCAT("/image/flags/" , iso),".png") as flag'])
                ->where(['enable' => 1])
                ->asArray()
                ->all();
        }
    }

    public function actionRegion($name = null, $id = null, $country = null, $iso = null)
    {
        if ($name != null) {
            $this->answer = Region::find()
                ->select(['id', 'name'])
                ->andWhere('LOWER(`name`) like "' . trim(strtolower($name)) . '%"')
                ->asArray()
                ->all();
        } elseif ($id != null) {
            $this->answer = Region::find()
                ->select(['id', 'name'])
                ->where(['id' => intval($id)])
                ->asArray()
                ->one();
        } elseif ($iso != null) {
            $this->answer = Region::find()
                ->select(['regions.id', 'regions.name'])
                ->where(['countries.iso' => $iso])
                ->join('inner join', 'countries', 'countries.iso=regions.country')
                ->asArray()
                ->all();
        } elseif ($country != null) {
            $this->answer = Region::find()
                ->select(['regions.id', 'regions.name'])
                ->where(['countries.id' => intval($country)])
                ->join('inner join', 'countries', 'countries.iso=regions.country')
                ->asArray()
                ->all();
        } else {
            $this->error = true;
            $this->message = ErrorType::not_found[$this->locale];
        }
    }

    public function actionCity($name = null, $id = null, $regid = null, $country = null)
    {
        if ($name != null) {
            $this->answer = City::find()
                ->select(['name', 'id'])
                ->andWhere('LOWER(`name`) like "' . trim(strtolower($name)) . '%"')
                ->asArray()
                ->all();
        } elseif ($id != null) {
            $this->answer = City::find()
                ->select(['name', 'id'])
                ->where(['id' => intval($id)])
                ->asArray()
                ->one();
        } elseif ($regid != null) {
            $this->answer = City::find()
                ->select(['cities.name', 'cities.id'])
                ->where(['regions.id' => intval($regid)])
                ->andWhere('regions.code=cities.region and regions.country=cities.country')
                ->join('inner join', 'regions', 'regions.code=cities.region')
                ->asArray()
                ->all();
        } elseif ($country != null) {
            $this->answer = City::find()
                ->select(['cities.name', 'cities.id'])
                ->where(['countries.iso' => $country])
                ->andWhere('regions.country=cities.country')
                ->join('inner join', 'countries', 'countries.iso=cities.country')
                ->asArray()
                ->all();
        } else {
            $this->answer = $name;
            $this->error = true;
            $this->message = ErrorType::not_found[$this->locale];
        }
    }
}

<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers;

use app\components\AccessType;
use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\components\HelpFunction;
use app\components\SubFunction;
use app\components\UploadImage;
use app\models\admin\AdminLeagues;
use app\models\admin\MergePersonal;
use app\models\admin\MergePlayers;
use app\models\admin\Players;
use app\models\admin\PlayersEd;
use app\models\admin\Seasons;
use app\models\Commands;
use app\models\Games;
use app\models\LikedCommans;
use app\models\statistic\CommandToTourn;
use app\models\statistic\GameOffer;
use app\models\statistic\PlayersInCommand;
use app\models\SubLeagues;
use app\models\SubTournaments;
use app\models\Tournaments;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\db\sqlite\Command;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class CommandController extends Controller
{
    private $answer = [];
    private $error = false;
    private $body;
    private $user;
    private $message;
    private $persona;
    private $player;
    private $locale = 'uk';

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration', 'update'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        $accept = \Yii::$app->request->getHeaders()->get('Authorization');
        if ($accept != null && $action->id != 'login' && $action->id != 'registration') {
            if (is_array($arr = explode(' ', $accept))) {

                if (!$this->user = User::findIdentityByAccessToken(explode(' ', $accept)[1])) {
                    $this->error = true;
                    $this->message = 'User not fount';
                    return;
                } else {
                    $this->locale = $this->user->app_loc;
                    $this->persona = MergePersonal::findOne(['user_id' => $this->user->id]);
                    $this->player = MergePlayers::findOne(['user_id' => $this->user->id]);
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionIndex()
    {
        $comm = [];
        if ($this->player != null) {
            foreach (PlayersInCommand::find()->select([
                'cm.command_id as cId',
                'CONCAT(cm.title ," (", cit.name, ")") as title',
                'cm.logo',
            ])->join('inner join', 'commands cm', 'cm.command_id=pl_to_com.command_id')
                ->join('inner join', 'cities cit', 'cit.id=cm.city_id')
                ->where(['cm.player_id' => $this->player->player_id])->distinct('cId')->asArray()->all() as $k => $com){
                $comm[$k] = $com;
                };
        }
        $this->answer['my'] = $comm;

        $like = [];
        if ($this->player != null) {
            $like = LikedCommans::find()->select([
                'cm.command_id as cId',
                'CONCAT(title ," (", cit.name, ")") as title',
                'cm.logo',
            ])
                ->join('inner join', 'commands cm', 'cm.command_id=command_liked.command_id')
                ->join('inner join', 'cities cit', 'cit.id=cm.city_id')
                ->where(['cm.player_id' => $this->player->player_id])->asArray()->all();
        }
        $this->answer['liked'] = $like;
        $this->answer['all'] = Commands::find()->select(['command_id as cId','CONCAT(title ," (", cit.name, ")") as title', 'logo'])
            ->join('inner join', 'cities cit', 'cit.id=commands.city_id')->asArray()->all();
    }

    public function actionInfo($id)
    {
        $comm = null;
        $players = [];
        if ($this->player != null) {
            $comm = PlayersInCommand::find()->select([
                'cm.command_id as cId',
            ])->join('inner join', 'commands cm', 'cm.command_id=pl_to_com.command_id and cm.command_id=' . $id)
                ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                ->where(['cm.player_id' => $this->player->player_id])->asArray()->one();
        }
        $this->answer['edit'] = $comm == null ? false : true;
        $this->answer['info'] = Commands::find()->select([
            'command_id as cId',
            'title',
            'logo'
        ])->where([
            'command_id' => $id
        ])->asArray()
            ->one();
        $countPl = 0;
        $date = 0;

        foreach (PlayersInCommand::find()->select(['pl.birthday', 'pl.player_id', 'photo', "CONCAT (pl.name, ' ' , pl.surename ) as name , pl.status"])
                     ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                     ->where(['command_id' => $id])->asArray()->all() as $k => $pl) {
            $players[$k] = $pl;
            $date += HelpFunction::getDuration($pl['birthday'], date("Y-m-d"));
            $countPl++;
        }
        $this->answer['players'] = $players;
        $this->answer['countPl'] = $countPl;
        $this->answer['average'] = $countPl != 0 ? intval($date / $countPl) : 0;
        $games = [];

        foreach (Games::find()
                     ->select([
                         'game_id',
                         'date',
                         'cm_in.title as inTitle',
                         'cm_out.title as outTitle',
                         'st.title as stTitle',
                         'CONCAT((SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1),
                         ":",
                         (SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1)) 
                         as score
                         ',
                     ])
                     ->join('left join', 'stadiums as st', 'st.stadiums_id=games.stadiums_id')
                     ->join('left join', 'commands cm_in', 'cm_in.command_id=command_id_in')
                     ->join('left join', 'commands cm_out', 'cm_out.command_id=command_id_out')
                     ->andWhere('cm_out.command_id=' . $id . ' or cm_in.command_id=' . $id)
                     ->limit(5)
                     ->orderBy('date')
                     ->asArray()
                     ->all() as $g => $game) {
            $games[$g] = $game;
        }
        $this->answer['subtours']=[];
        foreach (CommandToTourn::find()
                     ->select([
                         'trs.title as title',
                         'trs.sub_tournament_id as tourId'
                     ])
                     ->where(['command_id' => $id])
                     ->join('inner join', 'tournaments_sub trs', 'trs.sub_tournament_id=cm_to_tm.sub_tournament_id')
                     ->asArray()
                     ->all() as $k => $cmt) {
            $this->answer['subtours'][$k] = $cmt;
        }
        $this->answer['lastgame'] = $games;


    }

    public function actionPlayerinfo($id)
    {
        $comm = null;
        if ($this->player != null) {
            $comm = PlayersInCommand::find()->select([
                'cm.command_id as cId',
            ])->join('inner join', 'commands cm', 'cm.command_id=pl_to_com.command_id')
                ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                ->where(['cm.player_id' => $this->player->player_id])->asArray()->one();
        }
        if ($comm != null) {
            if(!$player = PlayersInCommand::find()
                ->select([
                    "pl.player_id",
                    "pl.command_id",
                    "pl.name",
                    "pl.surename",
                    "pl.patronymic",
                    "pl.photo",
                    "position.type as position",
                    "pl.birthday",
                    "pl.stature",
                    "pl.weight",
                    "pl.leg",
                    "pl.FB",
                    "pl.VK",
                    "pl.phone",
                    'pl.number',
                ])
                ->join('inner join', 'players_ed as pl', 'pl.player_id=pl_to_com.player_id')
                ->join('inner join', 'position', 'position.position_id=pl_to_com.position_id')
                ->where(['pl_to_com.player_id' => $id])
                ->asArray()->one()) {
                $player = PlayersInCommand::find()
                    ->select([
                        "pl.player_id",
                        "command_id",
                        "pl.name",
                        "pl.surename",
                        "pl.patronymic",
                        "pl.photo",
                        "position.type as position",
                        "pl.birthday",
                        "pl.stature",
                        "pl.weight",
                        "pl.leg",
                        "pl.FB",
                        "pl.VK",
                        "pl.phone",
                        'number',
                    ])
                    ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                    ->join('inner join', 'position', 'position.position_id=pl_to_com.position_id')
                    ->where(['pl_to_com.player_id' => $id])
                    ->asArray()->one();
                    }
            if($player != null){

                $number = [];
                for ($i = 0; $i < 99;) {
                    $number[$i++] = $i;
                }
                foreach (PlayersInCommand::find()->select([
                    "pl.player_id as pId",
                    "pl.name",
                    "pl.surename",
                    "pl.patronymic",
                    "pl.photo",
                    "number",
                    "position.type as position",
                ])
                             ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                             ->join('inner join', 'position', 'position.position_id=pl_to_com.position_id')
                             ->where(['command_id' => $player['command_id']])->asArray()->all() as $k => $pl) {
                    for ($i = 0; $i < count($number); $i++) {
                        if ($pl['number'] == $number[$i]) {
                            array_splice($number, $i, 1);
                        };
                    }
                }
                $this->answer = $player;
                $this->answer['numbers'] = $number;
                return;
            }
        } else {
            $this->error = true ;
            $this->message = ErrorType::player_not_found[$this->locale];
            return;
        }
    }

    public function actionGetfreenumber(){
        $comm = null;
        if ($this->player != null) {
            $comm = PlayersInCommand::find()->select([
                'cm.command_id as cId',
            ])->join('inner join', 'commands cm', 'cm.command_id=pl_to_com.command_id')
                ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                ->where(['cm.player_id' => $this->player->player_id])->asArray()->one();
            $number = [];
        }
        if($comm) {
            for ($i = 0; $i < 99;) {
                $number[$i++] = $i;
            }
            foreach (PlayersInCommand::find()->select([
                "pl.player_id as pId",
                "pl.name",
                "pl.surename",
                "pl.patronymic",
                "pl.photo",
                "number",
                "position.type as position",
            ])
                         ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                         ->join('inner join', 'position', 'position.position_id=pl_to_com.position_id')
                         ->where(['command_id' => $comm['cId']])->asArray()->all() as $k => $pl) {
                for ($i = 0; $i < count($number); $i++) {
                    if ($pl['number'] == $number[$i]) {
                        array_splice($number, $i, 1);
                    };
                }
            }
            $this->answer['numbers'] = $number;
        }
    }
    public function actionPlayerupdate()
    {
        $comm = null;
        if ($this->player != null) {
            $comm = PlayersInCommand::find()->select([
                'cm.command_id as cId',
            ])->join('inner join', 'commands cm', 'cm.command_id=pl_to_com.command_id')
                ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                ->where(['cm.player_id' => $this->player->player_id])->asArray()->one();
            if(isset($this->body['player_id']) && PlayersEd::find()->where(['player_id' => $this->body['player_id']])->one()){
                $this->error = true;
                $this->message = "Изменения игрока находятся на расмотрении";
                return ;
            }
            $player = new PlayersEd();
            if (count($this->body) > 0) {
                foreach ($this->body as $k => $v) {
                    if ($v == null && $v == '' && $k != 'VK' && $k != 'FB' && $k != 'patronymic' && $k != 'photo' && $k != 'phone') {
                        return $this->error = true && $this->message = 'Is value of ' . $k . ' empty';
                    } elseif ($k == 'photo' && $k != null) {
                        $player->photo = UploadImage::save_image($v, $k, 'img/player/' . \Yii::$app->security->generateRandomString(32) . '/');
                    } else {
                        $player->$k = $v;
                    }
                }

                $player->command_id = $comm['cId'];

                if ($player->save()) {
                    $this->answer = true;
                    $this->message = ErrorType::answer_true_add[$this->locale];
                    return;
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                    return;
                }
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
                return ;
            }
        }
        else {
            $this->error = true;
            $this->message = ErrorType::not_add[$this->locale];
            return;
        }
    }
}

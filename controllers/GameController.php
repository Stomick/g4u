<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers;

use app\components\CompAuthG4U;
use app\components\ErrorType;
use app\components\HelpFunction;
use app\components\UploadImage;
use app\models\admin\Asgmt;
use app\models\admin\MergePersonal;
use app\models\admin\MergePlayers;
use app\models\admin\Personal;
use app\models\admin\Players;
use app\models\admin\Stadium;
use app\models\Commands;
use app\models\EventsAssistType;
use app\models\EventsType;
use app\models\GamesPhotos;
use app\models\Games;
use app\models\GamesVideo;
use app\models\Leagues;
use app\models\LoginForm;
use app\models\SignupForm;
use app\models\statistic\EventsInGame;
use app\models\statistic\PersonalToGames;
use app\models\statistic\PlayersInCommand;
use app\models\statistic\PlayersToGame;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\filters\ContentNegotiator;
use yii\rest\Controller;
use yii\web\Response;

class GameController extends Controller
{
    private $answer = [];
    private $error = false;
    private $body;
    private $user;
    private $message;
    private $persona;
    private $player;
    private $locale = 'uk';

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'except' => ['login', 'registration'],
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        $accept = \Yii::$app->request->getHeaders()->get('Authorization');
        if ($accept != null && $action->id != 'login' && $action->id != 'registration') {
            if (is_array($arr = explode(' ', $accept))) {

                if (!$this->user = User::findIdentityByAccessToken(explode(' ', $accept)[1])) {
                    $this->error = true;
                    $this->message = 'User not fount';
                    return;
                } else {
                    $this->locale = $this->user->app_loc;
                    $this->persona = MergePersonal::findOne(['user_id' => $this->user->id]);
                    if ($pl = MergePlayers::findOne(['user_id' => $this->user->id])) {
                        $this->player = Players::findOne($pl->player_id);
                    } else {
                        $this->player = null;
                    }
                }
            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionEvent($id)
    {
        $game = Games::find()
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->one();
        $this->answer['type'] = EventsType::find()->orderBy('title')->asArray()->all();
        $this->answer['players'] = [
            $game->command_id_in => PlayersInCommand::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'number',
            ])
                ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')->asArray()
                ->where(['command_id' => $game->command_id_in])->all(),
            $game->command_id_out => PlayersInCommand::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'number',
            ])
                ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                ->asArray()
                ->where(['command_id' => $game->command_id_out])->all(),
        ];
        $this->answer['assistants'] = [];
        $this->answer['assistevent'] = EventsAssistType::find()->asArray()->all();
        /*
        $game = Games::find()
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->one();
        $this->answer['type'] = EventsType::find()->orderBy('title')->asArray()->all();
        $this->answer['players'] = [
            $game->command_id_in => PlayersInCommand::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'number',
            ])
                ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')->asArray()
                ->where(['command_id' => $game->command_id_in])->all(),
            $game->command_id_out => PlayersInCommand::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'number',
            ])
                ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                ->asArray()
                ->where(['command_id' => $game->command_id_out])->all(),
        ];
        $this->answer['assistants'] = [];
        $this->answer['assistevent'] = EventsAssistType::find()->asArray()->all();

        $game = Games::find()
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->one();
        $this->answer['type'] = EventsType::find()->orderBy('title')->asArray()->all();
        $this->answer['players'] = [
            $game->command_id_in => PlayersToGame::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'ptc.number',
            ])
                ->join('inner join' , 'pl_to_com as ptc' , 'ptc.player_id=pl_to_game.player_id')
                ->join('inner join', 'players as pl', 'pl.player_id=ptc.player_id')->asArray()
                ->where(['ptc.command_id' => $game->command_id_in])->all(),
            $game->command_id_out => PlayersToGame::find()->select([
                'pl.player_id as plid',
                'CONCAT(pl.name, " " , pl.surename) as name',
                'ptc.number',
            ])
                ->join('inner join' , 'pl_to_com as ptc' , 'ptc.player_id=pl_to_game.player_id')
                ->join('inner join', 'players as pl', 'pl.player_id=ptc.player_id')->asArray()
                ->where(['ptc.command_id' => $game->command_id_out])->all(),
        ];
        $this->answer['assistants'] = [];
        $this->answer['assistevent'] = EventsAssistType::find()->asArray()->all();
        /*
        $this->answer['assistants'] = Asgmt::find()->select([
            'pl.personal_id as id',
            'CONCAT("(", pt.type_ru ,")" , " " , pl.name , " " , pl.surename )as type'
        ])
            ->join('left join' , 'players as pl' , 'pl.personal_id=assignments.personal_id')
            ->join('left join', 'personal_type as pt', 'pt.id=pl.type_id')
            ->where(['game_id' => $gId])
            ->asArray()
            ->all();
        */
    }

    public function actionIndex($id)
    {
        if ($game = Games::find()
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->one()) {
            $this->answer = [
                'info' => [
                    'id' => $game->game_id,
                    'tour' => $game->tour,
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_in])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_out])->one()
                ],
                'date' => $game->date,
                'statistic' => [],
                'events' => EventsInGame::find()
                    ->select([
                        'event_id as evId',
                        'minute',
                        'cm.logo',
                        'et.title',
                        'ps.player_id as psId',
                        'ps.name as psName',
                        'pl.player_id as plId',
                        'pl.name as plName',
                    ])
                    ->join('inner join', 'commands cm', 'cm.command_id=events.command_id')
                    ->join('inner join', 'players ps', 'ps.player_id=events.assist_id')
                    ->join('inner join', 'players pl', 'pl.player_id=events.player_id')
                    ->join('inner join', 'events_type et', 'et.type_event_id=events.type_event_id')
                    ->where(['game_id' => $id])
                    ->orderBy('minute')
                    ->asArray()->all(),
            ];
        }
    }

    public function actionId($id)
    {
        if ($game = Games::find()
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->one()) {
            $this->answer = [
                'info' => [
                    'id' => $game->game_id,
                    'tour' => $game->tour,
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_in])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game->command_id_out])->one()
                ],
                'date' => $game->date,
                'statistic' => [],
                'events' => EventsInGame::find()
                    ->select([
                        'event_id as evId',
                        'minute',
                        'cm.logo',
                        'et.title',
                        'ps.player_id as psId',
                        'ps.name as psName',
                        'pl.player_id as plId',
                        'pl.name as plName',
                    ])
                    ->join('inner join', 'commands cm', 'cm.command_id=events.command_id')
                    ->join('inner join', 'players ps', 'ps.player_id=events.assist_id')
                    ->join('inner join', 'players pl', 'pl.player_id=events.player_id')
                    ->join('inner join', 'events_type et', 'et.type_event_id=events.type_event_id')
                    ->where(['game_id' => $id])
                    ->orderBy('minute')
                    ->asArray()->all(),
            ];
        }
    }

    public function actionAddevent($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }
        if ($event = new EventsInGame()) {
            foreach ($this->body as $k => $value) {
                $event->$k = $value;
            }
            $event->game_id = $id;
            if ($event->save()) {
                if ((EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 6])->count() > 1 && $event->type_event_id == 6) || $event->type_event_id = 14) {
                    $game = Games::findOne($event->game_id);
                    $game->the_end = 1;
                    $game->update();
                }
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }

    public function actionGetmedia($id, $type = 'all')
    {
        $ret = [];
        switch ($type) {
            case 'photo':
                $ret[$type] = GamesPhotos::find()->select(['src', 'photo_id as pId'])->where(['game_id' => $id])->asArray()->all();
                break;
            case 'video':
                $ret[$type] = GamesVideo::find()->select(['youtube_id', 'video_id as vId'])->where(['game_id' => $id])->asArray()->all();
                break;
            default:
                $ret['photo'] = GamesPhotos::find()->select(['src', 'photo_id as pId'])->where(['game_id' => $id])->asArray()->all();
                $ret['video'] = GamesVideo::find()->select(['youtube_id', 'video_id as vId'])->where(['game_id' => $id])->asArray()->all();
                break;
        }
        return $this->answer = $ret;
    }

    public function actionAddvideo($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }
        foreach ($this->body['video'] as $k => $vid) {
            if ($video = new GamesVideo()) {
                $video->youtube_id = $vid;
                $video->game_id = $id;
                if ($video->save()) {
                    $this->answer[$k] = [
                        'vId' => $video->video_id,
                        'youtube_id' => $video->youtube_id
                    ];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        }
    }

    public function actionAddphoto($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }

        foreach (HelpFunction::getFacebookImage($this->body['photo']) as $k => $ph) {
            if ($photo = new GamesPhotos()) {
                $photo->src = $ph;
                $photo->game_id = $id;
                if ($photo->save()) {
                    $this->answer[$k] = [
                        'pId' => $photo->photo_id,
                        'src' => $photo->src
                    ];
                } else {
                    $this->error = true;
                    $this->message = ErrorType::not_add[$this->locale];
                }
            }
        }

    }

    public function actionDelphoto($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }

        if ($photo = GamesPhotos::findOne($id)) {
            if ($photo->delete()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }else{
            $this->error = true;
            $this->message = ErrorType::not_found[$this->locale];
        }

    }

    public function actionDelvideo($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }

        if ($photo = GamesVideo::findOne($id)) {
            if ($photo->delete()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }else{
            $this->error = true;
            $this->message = ErrorType::not_found[$this->locale];
        }

    }

    public function actionGetevent($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }
        $ev = explode(':', $id)[0];
        $event = EventsInGame::find()->select([
            "event_id",
            "minute",
            "type_event_id",
            "assist_type_id",
            "game_id",
            "player_id",
            "assist_id",
            "command_id",
            "comment",

        ])->where(['event_id' => $ev])->asArray()->one();
        if ($event) {
            $this->answer = $event;
        } else {
            $this->error = true;
            $this->message = ErrorType::not_found[$this->locale];
        }
    }

    public function actionUpdateevent($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }
        if ($event = EventsInGame::findOne($id)) {
            foreach ($this->body as $k => $value) {
                $event->$k = $value;
            }
            if ($event->update()) {
                if ((EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 6])->count() > 1 && $event->type_event_id == 6) || $event->type_event_id = 14) {
                    $game = Games::findOne($event->game_id);
                    $game->the_end = 1;
                    $game->update();
                }
                $this->answer = true;
                $this->message = ErrorType::answer_true_add[$this->locale];
                return;
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
                return;
            }
        }
    }

    public function actionDelevent($id)
    {
        if ($this->persona == null) {
            $this->error = true;
            $this->message = 'You not journalist';
            return;
        }
        if ($event = EventsInGame::findOne($id)) {
            if ($event->delete()) {
                $this->answer = true;
                $this->message = ErrorType::answer_true_delete[$this->locale];
            } else {
                $this->error = true;
                $this->message = ErrorType::not_add[$this->locale];
            }
        }
    }

    public function actionInfo($id)
    {
        $ret = [];
        if ($game = Games::find()
            ->select([
                'game_id',
                'date',
                'tour',
                'stadiums_id as stId',
                'cm_in.command_id as inId',
                'cm_out.command_id as outId',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=' . $id . ' AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_out.command_id AND `type_event_id`= 13) as ownIn',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_in.command_id AND `type_event_id`= 13) as ownOut',
            ])
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->asArray()
            ->one()) {
            $ret = [
                'info' => [
                    'tour' => $game['tour'],
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['inId']])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['outId']])->one()
                ],
                'date' => $game['date'],
                'score' => ($game['ownIn'] + $game['goalIn']) . ':' . ($game['goalOut'] + $game['ownOut']),
                'statistic' => [],
                'stadium' => Stadium::find()->select(['stadiums_id as stId', 'title'])->where(['stadiums_id' => $game['stId']])->asArray()->one(),
                'photo' => [],
                'video' => '',

            ];
            $ind = 0;
            $ret['event_in'] = $ret['event_out'] = [];
            $retIn = [];
            foreach (EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['inId']])->all() as $k => $event) {
                if ($pl = Players::find()->select(['player_id as plId', 'CONCAT(name ," ", surename) AS name', 'status'])->where(['player_id' => $event->player_id])->asArray()->one()) {
                    if ($events = EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['inId'], 'player_id' => $pl['plId']])
                        ->andWhere('type_event_id in (1,2,3,4) or assist_id != 0')
                        ->all()) {
                        $retIn[$pl['plId']] = $pl;
                        foreach ($events as $e => $ev) {
                            if ($ev->type_event_id == 1) {
                                $retIn[$pl['plId']]['goal'] = EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 1, 'player_id' => $pl['plId']])->asArray()->count();
                            } elseif ($ev->type_event_id == 2) {
                                $retIn[$pl['plId']]['yellow'] = EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 2, 'player_id' => $pl['plId']])->asArray()->count();
                            } elseif ($ev->type_event_id == 3 || $ev->type_event_id == 4) {
                                $retIn[$pl['plId']]['red'] = EventsInGame::find()->where(['game_id' => $id, 'player_id' => $pl['plId']])->andWhere('type_event_id =4 or type_event_id = 3')->asArray()->count();
                            }
                        }
                        if ($event->assist_id != 0) {
                            $pl = Players::find()->select(['player_id as plId', 'CONCAT(name ," " ,  surename) AS name'])->where(['player_id' => $event->assist_id])->asArray()->one();
                            if (!isset($retOut[$pl['plId']])) {
                                $retIn[$pl['plId']] = $pl;
                            }
                            $retOut[$pl['plId']]['assist'] = [];//EventsInGame::find()->where(['game_id' => $id, 'assist_id' => $pl['plId']])->asArray()->count();
                        }
                    }
                }
            }
            $ind = 0;
            foreach ($retIn as $r => $val) {
                $ret['event_in'][$ind++] = $val;
            }
            $retOut = [];
            foreach (EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['outId']])->all() as $k => $event) {
                if ($pl = Players::find()->select(['player_id as plId', 'CONCAT(name ," " ,  surename) AS name', 'status'])->where(['player_id' => $event->player_id])->asArray()->one()) {
                    if ($events = EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['outId'], 'player_id' => $pl['plId']])
                        ->andWhere('type_event_id in (1,2,3,4) or assist_id != 0')
                        ->all()) {
                        $retOut[$pl['plId']] = $pl;
                        foreach ($events as $e => $ev) {
                            if ($ev->type_event_id == 1) {
                                $retOut[$pl['plId']]['goal'] = EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 1, 'player_id' => $pl['plId']])->asArray()->count();
                            } elseif ($ev->type_event_id == 2) {
                                $retOut[$pl['plId']]['yellow'] = EventsInGame::find()->where(['game_id' => $id, 'type_event_id' => 2, 'player_id' => $pl['plId']])->asArray()->count();
                            } elseif ($ev->type_event_id == 3 || $ev->type_event_id == 4) {
                                $retOut[$pl['plId']]['red'] = EventsInGame::find()->where(['game_id' => $id, 'player_id' => $pl['plId']])->andWhere('type_event_id =4 or type_event_id = 3')->asArray()->count();
                            }
                        }
                        if ($event->assist_id != 0) {
                            $pl = Players::find()->select(['player_id as plId', 'CONCAT(name ," " ,  surename) AS name'])->where(['player_id' => $event->assist_id])->asArray()->one();
                            if (!isset($retOut[$pl['plId']])) {
                                $retOut[$pl['plId']] = $pl;
                            }
                            $retOut[$pl['plId']]['assist'] = EventsInGame::find()->where(['game_id' => $id, 'assist_id' => $pl['plId']])->asArray()->count();
                        }
                    }
                }
            }
            $ind = 0;
            foreach ($retOut as $r => $val) {
                $ret['event_out'][$ind++] = $val;
            }
        }
        $this->answer = $ret;
    }

    public function actionRelay($id)
    {
        if ($game = Games::find()
            ->select([
                'game_id',
                'tour',
                'cm_in.command_id as inId',
                'cm_out.command_id as outId',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=' . $id . ' AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
            ])
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->asArray()
            ->one()) {
            $ret = [
                'info' => [
                    'tour' => $game['tour'],
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['inId']])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['outId']])->one()
                ],
                'score' => $game['goalIn'] . ':' . $game['goalOut'],

            ];
            $static = [];
            foreach (EventsType::find()->andWhere('type_event_id not in(5,6,14)')->all() as $k => $value) {
                $static['in'][$k] = [$value->title => EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['inId'], 'type_event_id' => $value->type_event_id])->asArray()->count()];
                $static['out'][$k] = [$value->title => EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['outId'], 'type_event_id' => $value->type_event_id])->asArray()->count()];
            }
            $ret['statistic'] = $static;
            $ret['events'] = EventsInGame::find()
                ->select([
                    'event_id as evId',
                    'minute',
                    'comment',
                    'IF(et.type_event_id not in (5,6,14), cm.logo , null) as logo',
                    'ps.player_id as psId',
                    'IF(et.type_event_id not in (5,6,14), ps.name , null) as psName',
                    'pl.player_id as plId',
                    'IF(et.type_event_id not in (5,6,14),CONCAT(et.title , " - ", pl.name , " " , pl.surename) , et.title) as title',
                ])
                ->join('inner join', 'commands cm', 'cm.command_id=events.command_id')
                ->join('inner join', 'players ps', 'ps.player_id=events.assist_id')
                ->join('inner join', 'players pl', 'pl.player_id=events.player_id')
                ->join('inner join', 'events_type et', 'et.type_event_id=events.type_event_id')
                ->where(['game_id' => $id])
                ->orderBy('minute')
                //->limit(10)
                ->asArray()->all();
            $this->answer = $ret;
        }
    }

    public function actionMycurgames()
    {
        $games = [];
        if ($this->player) {
            if ($comm = PlayersInCommand::find()->select(['command_id'])->where(['player_id' => $this->player->player_id])->asArray()->all()) {

                $comArr = [];

                foreach ($comm as $c => $n) {
                    $comArr[$c] = $n['command_id'];
                }

                foreach (Games::find()->select([
                    'from_unixtime(date / 1000, \'%d.%m.%Y %h:%m\') as dateG',
                    'IF(cm_in.player_id=' . $this->player->player_id . ' , true, IF(cm_out.player_id=' . $this->player->player_id . ' , true,false)) as cap',
                    'cm_in.logo as inLogo',
                    'cm_in.title as inTitle',
                    'cm_out.logo as outLogo',
                    'cm_out.title as outTitle',
                    'CONCAT((SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1),
                    ":",
                    (SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1)) as score',
                    'tour',
                    'the_end',
                    'stb.title as stitle',
                    'games.game_id'
                ])
                             ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                             ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                             ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                             //->where('the_end=1')
                             ->andWhere('command_id_in in (' . join(',', $comArr) . ') or command_id_out in (' . join(',', $comArr) . ') AND date/1000 > ' . strtotime('now'))
                             ->orderBy('date DESC')
                             ->limit(10)
                             ->asArray()->all() as $k => $game) {
                    $games[$k] = $game;
                    $games[$k]['players'] = PlayersToGame::find()->select([
                        'pl.player_id as plid',
                        'CONCAT(pl.name, " " , pl.surename) as name',
                        'number',
                        'ps.type'
                    ])
                        ->join('inner join', 'players as pl', 'pl.player_id=pl_to_game.player_id')
                        ->join('left join', 'pl_to_com as ptc', 'ptc.player_id=pl.player_id')
                        ->join('inner join', 'position as ps', 'ps.position_id=ptc.position_id')
                        ->where(['game_id' => $game['game_id']])
                        ->asArray()
                        ->all();
                }
            }
            //return $this->answer = $comm;
        }
        return $this->answer = $games;
    }

    public function actionMyfutgames()
    {
        $games = [];
        if ($this->player) {
            if ($comm = PlayersInCommand::find()->select(['command_id'])->where(['player_id' => $this->player->player_id])->asArray()->all()) {

                $comArr = [];

                foreach ($comm as $c => $n) {
                    $comArr[$c] = $n['command_id'];
                }

                foreach (Games::find()->select([
                    'from_unixtime(date / 1000, \'%d.%m.%Y %h:%m\') as dateG',
                    'IF(cm_in.player_id=' . $this->player->player_id . ' , true, IF(cm_out.player_id=' . $this->player->player_id . ' , true,false)) as cap',
                    'cm_in.logo as inLogo',
                    'cm_in.title as inTitle',
                    'cm_out.logo as outLogo',
                    'cm_out.title as outTitle',
                    'CONCAT((SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1),
                    ":",
                    (SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1)) as score',
                    'tour',
                    'the_end',
                    'stb.title as stitle',
                    'games.game_id'
                ])
                             ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                             ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                             ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                             ->where('the_end=0')
                             ->andWhere('command_id_in in (' . join(',', $comArr) . ') or command_id_out in (' . join(',', $comArr) . ') AND date/1000 > ' . strtotime('now'))
                             ->orderBy('date ASC')
                             ->asArray()->all() as $k => $game) {
                    $games[$k] = $game;
                    $games[$k]['players'] = PlayersToGame::find()->select([
                        'pl.player_id as plid',
                        'CONCAT(pl.name, " " , pl.surename) as name',
                        'number',
                        'ps.type'
                    ])
                        ->join('inner join', 'players as pl', 'pl.player_id=pl_to_game.player_id')
                        ->join('inner join', 'pl_to_com as ptc', 'ptc.player_id=pl.player_id')
                        ->join('inner join', 'position as ps', 'ps.position_id=ptc.position_id')
                        ->where(['game_id' => $game['game_id']])
                        ->asArray()
                        ->all();

                }
            }
            //return $this->answer = $comm;
        }
        return $this->answer = $games;
    }

    public function actionInviteingame($id)
    {
        if ($this->player && $this->player->status == 'captain') {
            PlayersToGame::deleteAll(['game_id' => $id]);
            foreach ($this->body['listPl'] as $pl) {
                $plToGame = PlayersToGame::find()->where(['player_id' => $pl, 'game_id' => $id])->one();
                if (!$plToGame && $pl['status'] == 'true') {
                    $plToGame = new PlayersToGame();
                    $plToGame->player_id = $pl['plid'];
                    $plToGame->game_id = $id;
                    $plToGame->save();
                }
            }
            $this->answer = true;
            $this->message = ErrorType::answer_true_add[$this->locale];
        } else {
            $this->error = true;
            $this->message = ErrorType::not_add[$this->locale];
        }
    }

    public function actionPlayersingame($id)
    {
        if ($this->player && $this->player->status == 'captain') {
            $players = [];
            if ($comm = PlayersInCommand::find()->select(['command_id'])->where(['player_id' => $this->player->player_id])->asArray()->all()) {

                $comArr = [];

                foreach ($comm as $c => $n) {
                    $comArr[$c] = $n['command_id'];
                }
                foreach (PlayersInCommand::find()->select([
                    'pl.player_id as plid',
                    'CONCAT(pl.name, " " , pl.surename) as name',
                    'number',
                    'ps.type'
                ])
                             ->join('inner join', 'players as pl', 'pl.player_id=pl_to_com.player_id')
                             ->join('inner join', 'position as ps', 'ps.position_id=pl_to_com.position_id')
                             ->andWhere('command_id in (' . join(',', $comArr) . ')')
                             ->asArray()
                             ->all() as $p => $pl) {
                    $pl['status'] = PlayersToGame::find()->where(['player_id' => $pl['plid'], 'game_id' => $id])->one() == null ? false : true;
                    $players[$p] = $pl;
                }
                $this->answer = $players;
                $this->message = $comArr;
            }
        }
    }
}

<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers;

use app\components\CompAuthG4U;
use app\components\UploadImage;
use app\models\admin\MergePlayers;
use app\models\admin\Players;
use app\models\admin\PositionInField;
use app\models\LoginForm;
use app\models\News;
use app\models\SignupForm;
use app\models\User;
use function Symfony\Component\Debug\Tests\testHeader;
use yii\filters\auth\CompositeAuth;
use app\components\HttpBearerAuthG4U;
use app\components\AuthG4U;
use yii\filters\auth\QueryParamAuth;
use yii\filters\ContentNegotiator;

use yii\rest\Controller;
use yii\web\Response;

class PlayersController extends Controller
{
    private $answer;
    private $error = false;
    private $body;
    private $user;
    private $message;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompAuthG4U::className(),
            'authMethods' => [
                HttpBearerAuthG4U::className()
            ],
        ];

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {

        if (\Yii::$app->request->isPost) {
            if (!$this->body = \Yii::$app->request->getBodyParams()) {
                $this->error = true;
                $this->message = 'empty body';
                return;
            }
        }
        $accept = \Yii::$app->request->getHeaders()->get('Authorization');
        if( $accept != null && $action->id != 'login') {
            if(is_array($arr = explode(' ', $accept))) {

                if(!$this->user = User::findIdentityByAccessToken(explode(' ', $accept)[1])){
                    $this->error = true;
                    $this->message = 'User not fount';
                    return;
                }

            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }

    public function actionGetposition()
    {
        $this->answer = PositionInField::find()->asArray()->all();
    }

    public function actionIndex($limit = 20, $offset = 0,$type = null, $name = null, $tied = null)
    {

        $where = '1';
        $andwhere = '1';
        if($tied != null){
            $where = 'tied='.$tied;
        }
        if($name != null){
            $n = strip_tags(trim($name));
            $andwhere = 'name like "' . $n . '%"';
            $andwhere .= 'or surename like "' . $n .'%"';
            $andwhere .= 'or patronymic like "' . $n .'%"';
            $andwhere .= 'or usr.email like "' . $n .'%"';
        }
        if($type){
            $andwhere = 'position_id=' . intval($type);
        }

        $ret =  Players::find()
            ->select([
                "players.player_id",
                "name",
                "surename",
                "patronymic",
                "photo",
                "position.type as position",
                "birthday",
                "stature",
                "weight",
                "leg",
                "FB",
                "VK",
                "phone",
            ])
            ->join('inner join' , 'position' , 'position.position_id=players.position_id')
            ->join('left join' , 'user_to_players utp' , 'utp.player_id=players.player_id')
            ->join('left join' , 'user usr' , 'usr.user_id=utp.user_id')
            ->andWhere($andwhere)
            ->andWhere($where)
            ->limit($limit)
            ->offset($offset)
            ->asArray()
            ->all();
        $this->answer = $ret;
    }

    public function actionAdd()
    {
        $player = new Players();
        if (count($this->body) > 0) {
            foreach ($this->body as $k => $v) {
                if ($v == null && $v == '' && $k != 'VK' && $k != 'FB' && $k != 'patronymic' && $k != 'phone' && $k != 'photo') {
                   return $this->error = true && $this->message = 'Is value of ' . $k . ' empty';
                }elseif ($k == 'photo'){
                    $player->photo = UploadImage::save_image($v , $k,'img/player/' . \Yii::$app->security->generateRandomString(32) . '/');
                }
                else {
                    $player->$k = $v;
                }
            }
            if(!MergePlayers::find()->where(['user_id' => $this->user->id])->one()) {
                if ($player->save()) {
                    $mergePers = new MergePlayers();
                    $mergePers->user_id = intval($this->user->id);
                    $mergePers->player_id = intval($player->player_id);
                    return $mergePers->save() ? $this->answer = $player->player_id : $this->error = true && $this->message = $mergePers->errors;
                } else {
                    return $this->error = true && $this->message = $player->errors;
                }
            }else {
                return $this->error = true && $this->message = 'Request is already send ';
            }
        } else {
            $this->error = true;
            $this->message = 'Empty info of player';
        }
    }
}

<?php
/**
 * Created by PhpStorm.
 * User: Stomick
 * Date: 18.07.2018
 * Time: 15:25
 */

namespace app\controllers;

use app\components\CompAuthG4U;
use app\components\HelpFunction;
use app\models\admin\Asgmt;
use app\models\admin\Franchise;
use app\models\admin\Players;
use app\models\admin\PositionInField;
use app\models\admin\Seasons;
use app\models\City;
use app\models\Commands;
use app\models\Country;
use app\models\EventsType;
use app\models\GamesPhotos;
use app\models\GameStatistic;
use app\models\GamesVideo;
use app\models\Leagues;
use app\models\LoginForm;
use app\models\Games;
use app\models\News;
use app\models\SignupForm;
use app\models\Stadium;
use app\models\statistic\CommandPosInTour;
use app\models\statistic\CommandToTourn;
use app\models\statistic\EventsInGame;
use app\models\statistic\PlayersInCommand;
use app\models\statistic\PlayersToGame;
use app\models\SubLeagues;
use app\models\SubTournaments;
use app\models\Tournaments;
use app\models\User;
use app\components\HttpBearerAuthG4U;
use yii\filters\ContentNegotiator;
use yii\rest\Controller;
use yii\web\Response;

class PortalController extends Controller
{
    private $answer = [];
    private $error = false;
    private $message;

    /**
     * {@inheritdoc}
     */

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }


    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return ['answer' => $this->answer, 'error' => $this->error, 'message' => $this->message];
    }


    public function actionCount()
    {
        $this->answer['players'] = count(Players::find()->asArray()->all());
        $this->answer['commands'] = count(Commands::find()->asArray()->all());
        $this->answer['leagues'] = count(SubLeagues::find()->asArray()->all());
        $this->answer['stadiums'] = count(\app\models\admin\Stadium::find()->asArray()->all());
        $this->answer['matchs'] = count(Games::find()->asArray()->all());
        $this->answer['tournaments'] = count(Tournaments::find()->asArray()->all());
    }

    public function actionFranch()
    {
        $this->answer = Franchise::find()
            ->select(['name', 'franchise_id  as frId'])
            ->asArray()
            ->all();
    }

    public function actionLeagues($id = null)
    {
        if ($id != null) {
            $this->answer = Leagues::find()
                ->select(['title as name', 'photo', 'description'])
                ->where(['status' => 1, 'leagues_id' => intval($id)])
                ->orderBy('name ASC')
                ->asArray()
                ->all();
        } else {
            $this->answer = Leagues::find()
                ->select(['title as name', 'leagues_id as lgId'])
                ->where(['status' => 1])
                ->orderBy('name ASC')
                ->asArray()
                ->all();
        }
    }

    public function actionSubleagues($id = null, $lgId = null)
    {
        if ($id == null) {
            $this->answer = SubLeagues::find()
                ->select(['sub_leagues_id as sblgId', 'title as name', 'city_id as citId'])
                ->where(['leagues_id' => intval($lgId), 'status' => 1])
                ->asArray()
                ->all();
        } else {
            $countrioies = [];
            foreach (SubLeagues::find()->select(['sub_leagues_id', 'city_id'])->distinct('cyti_id')->where(['leagues_id' => $id])->all() as $c => $city) {
                $countrioies[$c] = City::find()->select(['name', 'id as cId'])->where(['id' => $city->city_id])->asArray()->one();
                $cities = 1;
                foreach (Tournaments::find()
                             ->select([
                                 'tournament_id',
                                 'title',
                             ])
                             ->where([
                                 'sub_league_id' => $city->sub_leagues_id,
                                 'show_in_app' => 1
                             ])
                             ->asArray()
                             ->all() as $t => $tour) {
                    $countrioies[$c]['tours'] = $cities++;
                }
            }
            $this->answer = Leagues::find()
                ->select(['title as name', 'photo', 'description'])
                ->where(['status' => 1, 'leagues_id' => intval($id)])
                ->orderBy('name ASC')
                ->asArray()
                ->one();
            $this->answer['cities'] = $countrioies;
        }
    }

    public function actionSeasoninfo($id)
    {
        $current = [];
        $arhive = [];
        $international = [];
        foreach (SubLeagues::find()->select(['sub_leagues_id'])->where(['city_id' => $id])->all() as $sb => $value) {
            foreach (Tournaments::find()
                         ->select([
                             'tournament_id as tId',
                             'title',
                             'logo'
                         ])
                         ->where([
                             'sub_league_id' => $value->sub_leagues_id,
                             'show_in_app' => 1,
                             'arhive' => 0
                         ])->asArray()->all() as $k => $tour) {
                $current[$k] = $tour;
                foreach (Seasons::find()
                             ->select(['title', 'season_id as sId'])
                             ->where(['tournament_id' => $tour['tId'], 'status' => 1])
                             ->asArray()->all() as $s => $sea) {
                    $current[$k]['seasons'][$s] = $sea;
                    $current[$k]['seasons'][$s]['tours'] = SubTournaments::find()
                        ->select(['sub_tournament_id as stId', 'title'])
                        ->where(['season_id' => $sea['sId']])->asArray()->all();
                }
            }
        }
        $this->answer['current'] = $current;
        $this->answer['international'] = $international;
        $this->answer['arhive'] = $arhive;
    }
    private function getFormsGame($id,$idCom){
        $games = [];
        foreach (Games::find()
                     ->select([
                         'cm_in.command_id as inId',
                         'cm_out.command_id as outId',
                         '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                         '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
                     ])
                     ->join('left join', 'commands cm_in', 'cm_in.command_id=command_id_in')
                     ->join('left join', 'commands cm_out', 'cm_out.command_id=command_id_out')
                     ->where(['sub_tournament_id' => $id, 'the_end' => 1])
                     ->andWhere('cm_out.command_id=' . $idCom . ' or cm_in.command_id=' . $idCom)
                     ->orderBy('games.created_at')
                     //->limit(5)
                     ->asArray()
                     ->all() as $g => $game) {
            if ($game['inId'] == $idCom) {
                if ($game['goalIn'] == $game['goalOut']) {
                    $games[$g] = 'draw';
                } elseif ($game['goalIn'] > $game['goalOut']) {
                    $games[$g] = 'win';
                } else {
                    $games[$g] = 'lose';
                }
            } else {
                if ($game['goalIn'] == $game['goalOut']) {
                    $games[$g] = 'draw';
                } elseif ($game['goalIn'] > $game['goalOut']) {
                    $games[$g] = 'lose';
                } else {
                    $games[$g] = 'win';
                }
            }

        }
        return $games;
    }
    private function getPlayerByTypeInCommand($idCom){
        $ret = [];
        foreach (PositionInField::find()->andWhere('`desc` is not NULL')->orderBy('`desc`')->all() as $k=> $pos){
            if($play = PlayersInCommand::find()->from('pl_to_com plc')
                ->select([
                    'pl.name',
                    'pl.surename',
                    'plc.number',
                ])
                ->join('inner join' , 'players pl' , 'pl.player_id=plc.player_id')
                ->where(['plc.command_id' => $idCom , 'plc.position_id' => $pos->position_id])
                ->orderBy('plc.number')
                ->asArray()
                ->all()){
                $ret[$pos->desc] = $play;
            }
        }
        return $ret;
    }

    private function getTableGame($id = null, $tour = null, $commId = null)
    {

        if ($id != null) {
            $where = ['sub_tournament_id' => $id];
        } else if ($tour != null) {
            $where = ['tour' => $tour];
        } elseif ($commId != null) {
            $where = 'game.command_id_in=' . $commId . ' or game.command_id_out=' . $commId;
        } else {
            $where = '1';
        }
        $tours = [];
        $indTour = 0;
        $ret[] = [];
        foreach (Games::find()->select([
            'from_unixtime(date / 1000, \'%d %M, %a %h:%i\') as date',
            'command_id_in',
            'command_id_out',
            'tour',
            'the_end',
            'stb.title as stitle',
            'games.game_id'
        ])
                     ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                     ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                     ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                     ->where($where)->orderBy('tour')->asArray()->all() as $k => $game) {
            $tours[$indTour++] = [
                'game_id' => $game['game_id'],
                'tour' => $game['tour'],
                'the_end' => $game['the_end'],
                'date' => $game['date'],
                'in' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    //'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')
                    ->where(['command_id' => $game['command_id_in']])->one(),
                'out' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    //'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')
                    ->where(['command_id' => $game['command_id_out']])->one()
            ];
        }

        for ($i = 0; $i < count($tours); $i++) {
            $ret[$tours[$i]['tour']] = [];
        }
        foreach ($tours as $k => $tour) {
            array_push($ret[$tour['tour'] - 1], $tour);
        }
        return $ret;
    }

    private function getLastGame($id , $comId= null)
    {
        $lastGame = [];
        $where = [];
        $where['sub_tournament_id'] = $id;
        $where['the_end'] = 1;
        $andWhere = 1;
        if($comId){
            $andWhere = 'cm_in.command_id=' .$comId .' or cm_out.command_id='. $comId;
        }
        foreach (Games::find()
                     ->select([
                         'from_unixtime(date / 1000, \'%d %M, %a %h:%i\') as date',
                         'command_id_in as cIn',
                         'command_id_out as cOut',
                         'tour',
                         'lgb.title',
                         'stb.title as stitle',
                         'games.game_id as id'
                     ])
                     ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                     ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                     ->join('left join', 'leagues_sub lgb', 'lgb.sub_leagues_id=sub_leagues_id')
                     ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                     ->where($where)
                     ->andWhere($andWhere)
                     //->andWhere('date/1000 BETWEEN ' . strtotime('-10 day') . ' AND '.strtotime('now') )
                     ->limit(10)
                     ->orderBy('date')
                     ->asArray()
                     ->all() as $k => $game) {
            $lastGame[$k] = [
                'info' => [
                    'score' =>
                        EventsInGame::find()->where(['game_id' => $game['id'], 'command_id' => $game['cIn'], 'type_event_id' => 1])->asArray()->count()
                        . ':' .
                        EventsInGame::find()->where(['game_id' => $game['id'], 'command_id' => $game['cOut'], 'type_event_id' => 1])->asArray()->count()
                    ,
                    'date' => $game['date'],
                    'gameId' => $game['id'],
                    'tour' => $game['tour'],
                    'in' =>
                        Commands::find()->select([
                            'title_min as title',
                            'logo',
                            'command_id'
                        ])->where(['command_id' => $game['cIn']])->asArray()->one(),
                    'out' => Commands::find()->select([
                        'title_min as title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['cOut']])->asArray()->one()

                ],
            ];
        }
        return $lastGame;
    }

    private function getFutureGames($id , $comId=null)
    {
        $beGame = [];
        $where['sub_tournament_id'] = $id;
        $where['the_end'] = 0;
        $andWhere = 1;
        if($comId){
            $andWhere = 'cm_in.command_id=' .$comId .' or cm_out.command_id='. $comId;
        }
        foreach (Games::find()
                     ->select([
                         'from_unixtime(date / 1000, \'%d %M, %a %h:%i\') as date',
                         'from_unixtime(date / 1000, \'%h:%i\') as time',
                         'command_id_in as cIn',
                         'command_id_out as cOut',
                         'tour',
                         'lgb.title',
                         'stb.title as stitle',
                         'games.game_id as id'
                     ])
                     ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                     ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                     ->join('left join', 'leagues_sub lgb', 'lgb.sub_leagues_id=sub_leagues_id')
                     ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                     ->where($where)
                     ->andWhere($andWhere)
                     //->andWhere('date /1000 < ' . strtotime('+5 day'))
                     //->andWhere('date/1000 BETWEEN ' . strtotime('now') . ' AND '. strtotime('+10 day ') )
                     ->orderBy('date')
                     ->limit(10)
                     ->asArray()
                     ->all() as $k => $game) {
            $beGame[$k] = [
                'info' => [
                    'score' => " VS ",
                    'date' => $game['date'],
                    'gameId' => $game['id'],
                    'tour' => $game['tour'],
                    'stadion' => $game['stitle'],
                    'time' => $game['time'] == null ? "00:00" : $game['time'],
                    'in' =>
                        Commands::find()->select([
                            'title_min as title',
                            'logo',
                            'command_id'
                        ])->where(['command_id' => $game['cIn']])->asArray()->one(),
                    'out' => Commands::find()->select([
                        'title_min as title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['cOut']])->asArray()->one()
                ],
            ];
        }
        return $beGame;
    }

    private function getCommands($id)
    {

        if ($com = CommandPosInTour::find()
            ->select([
                'com.command_id as comId',
                'position',
                'pts',
                'scored as goals',
                'missed',
                '(scored - missed) as disgoals',
                'com_pos_in_tour.status',
                'com.title',
                'com.logo',
                'com.command_id',

            ])
            ->join('inner join', 'commands as com', 'com.command_id=com_pos_in_tour.command_id')
            ->where(['sub_tournament_id' => $id])
            ->orderBy('pts DESC')
            ->asArray()->all()) {
            foreach ($com as $k => $cm) {
                $com[$k]['games'] = Games::find()->where(['sub_tournament_id' => $id, 'the_end' => 1])->andWhere('`command_id_in`=' . $cm['comId'] . '  or `command_id_out`=' . $cm['comId'])->asArray()->count();
            }
        }
        return $com;
    }
    private function getPlayerFromCommand($id){
        $ret = [];

        foreach (Players::find()
            ->select([
                'players.player_id as plId',
                'name',
                'birthday',
                'surename',
                'photo',
                'pos.type'
            ])
            ->innerJoin('pl_to_com ptc', 'ptc.player_id=players.player_id')
            ->innerJoin('position pos' , 'pos.position_id=ptc.position_id' )
            ->where(['ptc.command_id' => $id])->asArray()->all() as $k => $pl){
            $ret[$k] = $pl;
            $ret[$k]['age'] = HelpFunction::getDuration($pl['birthday'], date("Y-m-d"));

        }
        return $ret;
    }

    private function getTopPlayers($id ,$comId=null, $type = 'goal' , $limit = 5)
    {
        $players = [];
        $tmpPl = [];
        $andWhere = 1;
        if ($comId) {
                $andWhere = 'command_id_in=' . $comId . ' or command_id_out=' . $comId;
        }

        foreach (Games::find()->where(['sub_tournament_id' => $id])->andWhere($andWhere)->all() as $s => $game) {
            $where['game_id'] = $game->game_id;
            if($comId){
                $where['command_id'] = $comId;
            }
            switch ($type){
                case 'goal':
                    $where['type_event_id'] = 1;
                    break;
                case 'assist':
                    $where['assist_type_id'] = 1;
                    break;
                case 'cart':
                    $andWhere == 1 ? $andWhere = "type_event_id = 4 OR type_event_id=3" : $andWhere .= "AND type_event_id = 4 OR type_event_id=3";
                    break;
                case 'game':
                    $where['command_id'] = $comId;
                    break;
                default:
                    $where['type_event_id'] = 1;
                    break;
            }
            if($type == 'game') {
                foreach (PlayersToGame::find()->where($where)->andWhere('player_id != 0')->all() as $v => $g) {
                    if (isset($tmpPl[$g->player_id])) {
                        $tmpPl[$g->player_id] += 1;
                    } else {
                        $tmpPl[$g->player_id] = 1;
                    }
                }
            }else{
                foreach (EventsInGame::find()->where($where)->andWhere('player_id != 0')->all() as $v => $g) {
                    if (isset($tmpPl[$g->player_id])) {
                        $tmpPl[$g->player_id] += 1;
                    } else {
                        $tmpPl[$g->player_id] = 1;
                    }
                }
            }
        }

        $index = 0;
        foreach ($tmpPl as $k => $goal) {
            $players[$index++] = [
                'player' => Players::find()
                    ->select(['CONCAT(name, " " , surename) as name', 'photo','ptc.number'])
                    ->join('inner join' , 'pl_to_com ptc', 'ptc.player_id=players.player_id' )
                    ->where(['players.player_id' => $k])->asArray()->one(),
                'command' => (Commands::find()->select(['title'])
                    ->innerJoin('pl_to_com as plt', 'plt.player_id=' . $k)
                    ->where('plt.command_id=commands.command_id')->one())
                ,
                'points' => $goal];
        }
        if($index > 0 ) {
            for ($i = 0; $i < $index; $i++) {
                for ($j = 0; $j <= $i; $j++) {
                    if ($players[$j]['points'] < $players[$i]['points']) {
                        $tmp = $players[$i];
                        $players[$i] = $players[$j];
                        $players[$j] = $tmp;
                        $i = 0;
                        break;
                    }
                }
            }
        }

        return array_slice($players, 0, $limit);
    }

    private function getTopAssistPlayers($id)
    {
        $players = [];
        $tmpPl = [];
        foreach (Games::find()->where(['sub_tournament_id' => $id])->all() as $s => $game) {
            foreach (EventsInGame::find()->where(['game_id' => $game->game_id, 'type_event_id' => 1])->andWhere('assist_id != 0')->all() as $v => $g) {
                if (isset($tmpPl[$g->assist_id])) {
                    $tmpPl[$g->assist_id] += 1;
                } else {
                    $tmpPl[$g->assist_id] = 1;
                }
            }
        }

        $index = 0;
        foreach ($tmpPl as $k => $goal) {
            $players[$index++] = [
                'player' => Players::find()
                    ->select(['CONCAT(name, " " , surename) as name', 'photo'])
                    ->where(['player_id' => $k])->asArray()->one(),
                'command' => (Commands::find()->select(['title'])
                    ->innerJoin('pl_to_com as plt', 'plt.player_id=' . $k)
                    ->where('plt.command_id=commands.command_id')->one())
                ,
                'points' => $goal];
        }
        for ($i = 0; $i < $index; $i++) {
            for ($j = 0; $j <= $i; $j++) {
                if ($players[$j]['points'] < $players[$i]['points']) {
                    $tmp = $players[$i];
                    $players[$i] = $players[$j];
                    $players[$j] = $tmp;
                    $i = 0;
                    break;
                }
            }
        }


        return array_slice($players, 0, 5);
    }


    public function actionNews($lgId = 0, $frId = null, $subId = null, $nId = null, $id = null)
    {
        $id = [];
        //return $this->answer = $lgId;
        $where = 'news.league_id=' . $lgId;

        if ($frId) {
            foreach (Leagues::find()->where(['franchise_id' => intval($frId)])->select(['leagues_id as id'])->asArray()->all() as $k => $leag) {
                $id[] = $leag['id'];
            }
        }
        //return $this->answer = $id;

        if (count($id) > 0) {
            $where = 'news.league_id IN (' . join(',', $id) . ')';
        }

        if ($nId != null) {
            $where = 'news.news_id=' . $nId;
        }

        $this->answer = News::find()->select([
            "news.news_id",
            "title",
            "text",
            // "tags",
            "video",
            "IF(lk.like_id is null, false , true) as liked",
            "news.photo",
            "CONCAT(p.surename,' ' , p.name) as name",
            "DATE_FORMAT(FROM_UNIXTIME(`news`.`created_at`), '%H:%i %d-%m-%Y') as date"
        ])
            ->join('left join', 'personals p', 'p.personal_id=maker')
            ->join('left join', 'news_like lk', 'lk.news_id=news.news_id')
            ->where($where)
            ->asArray()
            ->orderBy('news.created_at DESC')
            ->all();

    }

    private function getListgames($id, $comId = null, $tour = null, $stadId = null, $type = null , $filters = true)
    {
        $tours = [];
        $stadiums = [];
        $andWhere = 1;

        $where = [];

        $where['sub_tournament_id'] = $id;

        if ($comId) {
            $andWhere = 'cm_out.command_id=' . $comId . ' or cm_in.command_id=' . $comId;
        }
        if ($tour) {
            $where['tour'] = intval($tour);
        }
        // return $this->answer = $where;
        if ($stadId) {
            $where['stb.stadiums_id'] = $stadId;
        }
        if ($type) {
            $where['the_end'] = 1;
        }

        foreach (Games::find()->select([
            'from_unixtime(date / 1000, \'%d.%m.%Y\') as date',
            'from_unixtime(date / 1000, \'%d-%m-%Y %h:%m\') as dateG',
            'command_id_in',
            'command_id_out',
            '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
            '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
            'tour',
            'the_end',
            'stb.title as stitle',
            'stb.stadiums_id as stId',
            'games.game_id'
        ])
                     ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
                     ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
                     ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                     ->where($where)
                     ->andWhere($andWhere)
                     ->orderBy('tour')->asArray()->all() as $k => $game) {
            if (!isset($tours[$game['tour']])) {
                $tours[$game['tour']] = [];
            }
            $stadiums[$game['stId']] = $game['stitle'];
            array_push($tours[$game['tour']], [
                'game_id' => $game['game_id'],
                'tour' => $game['tour'],
                'stadium' => $game['stitle'],
                'the_end' => $game['the_end'],
                'date' => $game['dateG'],
                'score' => $game['goalIn'] . ":" . $game['goalOut'],
                'in' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')
                    ->where(['command_id' => $game['command_id_in']])->one(),
                'out' => Commands::find()->select([
                    'CONCAT(title ," (", cit.name, ")") as title',
                    'logo',
                    'command_id',
                ])->join('inner join', 'cities cit', 'cit.id=commands.city_id')->where(['command_id' => $game['command_id_out']])->one()
            ]);

        }
        $ret = [];
        $index = 0;

        $toursFilter = [];

        foreach (Games::find()->select(['tour'])->where(['sub_tournament_id' => $id])->distinct()->all() as $k => $v) {
            $toursFilter[$index++] = $v->tour;
        }

        $index = 0;
        foreach ($tours as $k => $val) {
            //$toursFilter[$index] = $k;
            $ret[$index] = [
                'date' => $k . ' Tour',
                'games' => self::sortGames($val)
            ];
            $index++;
        }
        $retSt = [];
        $index = 0;

        foreach ($stadiums as $k => $v) {
            if ($v != null) {
                $retSt[$index++] = [
                    'id' => $k,
                    'title' => $v
                ];
            }
        }

        $returns['gamelist'] = $ret;
        if($filters){
            $returns['filter'] = [
                'tour' => $toursFilter,
                'commands' => CommandToTourn::find()
                    ->select(['cm.command_id as comId', 'title'])
                    ->join('inner join', 'commands cm', 'cm.command_id=cm_to_tm.command_id')
                    ->where(['sub_tournament_id' => $id])
                    ->orderBy('title')
                    ->asArray()
                    ->all(),
                'statiums' => $retSt
            ];
        }
        return $returns;
    }

    public function sortGames($players)
    {
        for ($i = 0; $i < count($players); $i++) {
            for ($j = $i; $j < count($players); $j++) {
                if ($players[$j]['tour'] < $players[$i]['tour']) {
                    $tmp = $players[$j];
                    $players[$j] = $players[$i];
                    $players[$i] = $tmp;
                    $i = 0;
                }
            }
        }
        return $players;
    }


    private function getTable($id)
    {
        $ret = [];
        foreach (CommandPosInTour::find()
                     ->select([
                         'cmd.title',
                         'cmd.logo',
                         'com_pos_in_tour.command_id as comId',
                         'position',
                         'pts',
                         'win',
                         'draw',
                         'lose',
                         'scored',
                         'missed',
                         '(scored - missed) as diff',
                         'com_pos_in_tour.status',
                         'cmd.command_id as comId'
                     ])
                     ->join(    'inner join', 'commands as cmd', 'cmd.command_id=com_pos_in_tour.command_id')
                     ->where(['sub_tournament_id' => $id])->asArray()->orderBy('position')->all() as $k => $table) {
            $table['cGame'] = Games::find()->where(['the_end' => 1, 'sub_tournament_id' => $id])->andWhere('command_id_in=' . $table['comId'] . ' or command_id_out=' . $table['comId'])
                ->asArray()->count();
            $ret[$k] = $table;
            $games = [];
            foreach (Games::find()
                         ->select([
                             'cm_in.command_id as inId',
                             'cm_out.command_id as outId',
                             '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=games.game_id AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                             '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=games.game_id AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
                         ])
                         ->join('left join', 'commands cm_in', 'cm_in.command_id=command_id_in')
                         ->join('left join', 'commands cm_out', 'cm_out.command_id=command_id_out')
                         ->where(['sub_tournament_id' => $id, 'the_end' => 1])
                         ->andWhere('cm_out.command_id=' . $table['comId'] . ' or cm_in.command_id=' . $table['comId'])
                         ->orderBy('games.created_at')
                         //->limit(5)
                         ->asArray()
                         ->all() as $g => $game) {
                if ($game['inId'] == $table['comId']) {
                    if ($game['goalIn'] == $game['goalOut']) {
                        $games[$g] = 'drow';
                    } elseif ($game['goalIn'] > $game['goalOut']) {
                        $games[$g] = 'win';
                    } else {
                        $games[$g] = 'lose';
                    }
                } else {
                    if ($game['goalIn'] == $game['goalOut']) {
                        $games[$g] = 'drow';
                    } elseif ($game['goalIn'] > $game['goalOut']) {
                        $games[$g] = 'lose';
                    } else {
                        $games[$g] = 'win';
                    }
                }

            }

            $ret[$k]['SfM'] = $table['cGame'] == 0 ? 0 : floatval($table['pts'] / $table['cGame']);
            $ret[$k]['game'] = $games;
        };
        return $ret;
    }

    private function getStadiums($id)
    {
        $stadiums = [];
        foreach (Games::find()->select([
            'stb.title as stitle',
            'stb.stadiums_id as stId',
            'stb.address',
            'stb.latitude',
            'stb.longitude'
        ])
                     ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
                     ->where(['sub_tournament_id' => $id])
                     ->orderBy('tour')->asArray()->all() as $k => $game) {
            $stadiums[$game['stId']] = $game;
        }
        $retSt = [];
        $index = 0;
        foreach ($stadiums as $k => $v) {
            if ($v['stId'] != null) {
                $retSt[$index++] = $v;
            }
        }
        return $retSt;
    }

    private function getStatistic($id, $name = null, $comId = null, $posId = null, $limit, $offset, $order, $up)
    {
        $ret = [];
        $comm_id = [];
        $ind = 0;
        $players = [];
        $where = 1;

        if ($up == 1) {
            $order = $order . ' ASC';
        } else {
            $order = $order . ' DESC';
        }
        $whereCom['sub_tournament_id'] = $id;

        if ($comId) {
            $whereCom['command_id'] = $comId;
        }

        foreach (CommandToTourn::find()->where($whereCom)->all() as $g => $v) {
            $comm_id[$ind++] = $v->command_id;
        }


        if (count($comm_id) > 0) {

            $andWhere = 'ptc.command_id in (' . join(",", $comm_id) . ')';
            if ($name) {
                $where = 'LCASE(pl.name) LIKE "%' . strip_tags($name) . '%" OR LCASE(pl.surename) LIKE "%' . strip_tags($name) . '%"';
            }

            if ($posId) {
                $andWhere .= 'AND pl.position_id=' . $posId;
            }
            $maxPl = count(PlayersToGame::find()->from('pl_to_game ptg')
                ->join('inner join', 'pl_to_com ptc', 'ptc.player_id=ptg.player_id')
                ->andWhere('ptc.command_id in (' . join(",", $comm_id) . ')')
                ->asArray()->all());
            $plIndex = 0;
            $lims = $limit;
            if ($limit > $maxPl) {
                $limit = $maxPl - $limit;
            }
            if (($limit * $offset) >= $maxPl) {
                $limit = $maxPl - ($limit * ($offset - 1));

            }
            foreach (PlayersToGame::find()->from('pl_to_game ptg')
                         ->select([
                             'ptg.player_id as plId',
                             'CONCAT(pl.name," ", pl.surename) as name',
                             'pos.type',
                             'ptc.number',
                             'cm.title as comTitle',
                             'cm.logo as comLogo',
                             '(SELECT COUNT(*) FROM pl_to_game as gm where gm.player_id=plId) as games',
                             '(SELECT COUNT(*) FROM events as evn where type_event_id = 1 AND evn.player_id=plId) as goal',
                             '(SELECT COUNT(*) FROM events as evn where type_event_id = 12 AND evn.player_id=plId) as penalty',
                             '(SELECT COUNT(*) FROM events as evn where evn.assist_id=plId) as assist',
                             '(SELECT COUNT(*) FROM events as evn where type_event_id = 2 AND evn.player_id=plId) as yellow',
                             '(SELECT COUNT(*) FROM events as evn where type_event_id = 3 AND evn.player_id=plId) as red',
                             '(SELECT (SUM(scored-missed))/count(statistic_id) FROM game_statistic as gms  where gms.command_id = cm.command_id AND gms.sub_tournament_id=' . $id . ') as points',

                         ])
                         ->join('inner join', 'pl_to_com ptc', 'ptc.player_id=ptg.player_id')
                         ->join('inner join', 'commands cm', 'cm.command_id=ptc.command_id')
                         ->join('inner join', 'players pl', 'pl.player_id=ptg.player_id')
                         ->join('inner join', 'position pos', 'pos.position_id=ptc.position_id')
                         ->distinct('plId')
                         ->where($where)
                         ->andWhere($andWhere)
                         ->limit($limit)
                         ->offset($offset)
                         ->orderBy($order)
                         ->asArray()
                         ->all() as $e => $event) {
                $players[$e] = $event;
            }
        }
        $lim = 0;
        for ($i = 5; $i < $maxPl; $i += $i) {
            $limits[$lim++] = $i;
        }
        $limits[$lim] = $maxPl;

        if (count($players) == $limit && $offset > 1) {
            $offsets = [
                'prev' => $offset - 1,
                'curr' => $lims * $offset >= $maxPl ? 1 : $offset,
                'next' => $lims * $offset >= $maxPl ? null : $offset + 1
            ];

        } elseif ($lims == $maxPl) {
            $offsets = [
                'prev' => null,
                'curr' => 1,
                'next' => null,
            ];

        } elseif (count($players) < $lims) {
            $offsets = [
                'prev' => $offset == 1 ? null : $offset - 1,
                'curr' => $lims * $offset >= $maxPl ? 1 : $offset,
                'next' => null
            ];

        } else {
            $offsets = [
                'prev' => null,
                'curr' => $lims * $offset >= $maxPl ? 1 : $offset,
                'next' => $lim * $offset >= $maxPl ? null : $offset + 1
            ];
        }
        return $ret = [
            'table' => $players,
            'limit' => $limit,
            'filter' => [
                'pos' => PositionInField::find()->select(['position_id as posId', 'type'])->asArray()->all(),
                'commands' => CommandToTourn::find()
                    ->select(['cm.command_id as comId', 'title'])
                    ->join('inner join', 'commands cm', 'cm.command_id=cm_to_tm.command_id')
                    ->where(['sub_tournament_id' => $id])
                    ->asArray()
                    ->all(),
                'limit' => $limits,
                'offset' => $offsets
            ]
        ];
    }

    private function getNews($id)
    {
        return [];
    }

    public function actionStatistic($id, $name = null, $comId = null, $posId = null, $limit = 20, $offset = 1, $order = 'name', $up = 1)
    {
        $this->answer = self::getStatistic($id, $name, $comId, $posId, $limit, $offset, $order, $up);
    }

    public function actionResults($id, $comId = null, $tour = null, $stadId = null)
    {
        $this->answer['result'] = self::getListgames($id, $comId, $tour, $stadId, 'result');
    }

    public function actionNewssub($id)
    {
        $this->answer['table'] = self::getCommands($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
        $this->answer['news'] = self::getNews($id);
    }

    public function actionTable($id)
    {
        $this->answer['table'] = self::getTable($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
    }

    public function actionCalendar($id, $comId = null, $tour = null, $stadId = null)
    {
        $this->answer['calendar'] = self::getListgames($id, $comId, $tour, $stadId);
        $this->answer['table'] = self::getCommands($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
    }

    public function actionClubs($id)
    {
        $this->answer['clubs'] = CommandToTourn::find()
            ->select(['cm.command_id as comId', 'title', 'logo'])
            ->join('inner join', 'commands cm', 'cm.command_id=cm_to_tm.command_id')
            ->where(['sub_tournament_id' => $id])
            ->asArray()
            ->all();
        $this->answer['table'] = self::getCommands($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
    }

    public function actionStadiums($id)
    {
        $this->answer['stadiums'] = self::getStadiums($id);
        $this->answer['table'] = self::getCommands($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
    }

    public function actionContacts($id)
    {
        $this->answer['contacts'] = [];
        $this->answer['table'] = self::getCommands($id);
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
    }

    public function actionTournirs($id)
    {
        $tournirs = SubTournaments::find()->select(['sub_tournament_id as subId', 'title'])->where(['season_id' => (SubTournaments::findOne($id))->season_id])->asArray()->all();
        $this->answer['season'] = Seasons::find()->select(['title'])->where(['season_id' => (SubTournaments::findOne($id))->season_id])->asArray()->one();
        $this->answer['tournirs'] = $tournirs;
        $this->answer['lastgames'] = self::getLastGame($id);
        $this->answer['begingames'] = self::getFutureGames($id);
        $this->answer['commands'] = self::getCommands($id);
        $this->answer['topplayers']['top'] = self::getTopPlayers($id);
        $this->answer['topplayers']['assist'] = self::getTopAssistPlayers($id);
    }

    public function actionGame($id)
    {
        if ($game = Games::find()
            ->select([
                'from_unixtime(date / 1000, \'%d %M, %a %h:%i\') as date',
                'command_id_in as cIn',
                'command_id_out as cOut',
                'cm_in.logo as logoIn',
                'cm_out.logo as logoOut',
                'cm_in.title_min as titleIn',
                'cm_out.title_min as titleOut',
                'tour',
                'CONCAT(gstatIn.scored,":" ,gstatOut.scored) as scored',
                'lgb.title',
                'stb.stadiums_id as stId',
                'games.game_id as id',
                'stb.title as sTitle',
                'stb.address'
            ])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->join('left join' , 'game_statistic gstatIn' , 'games.game_id=gstatIn.game_id and cm_in.command_id=gstatIn.command_id')
            ->join('left join' , 'game_statistic gstatOut' , 'games.game_id=gstatOut.game_id and cm_out.command_id=gstatOut.command_id')
            ->join('left join', 'tournaments_sub lgb', 'lgb.sub_tournament_id=games.sub_tournament_id')
            ->join('left join', 'stadiums stb', 'stb.stadiums_id=games.stadiums_id')
            ->where(['games.game_id' => $id])
            //->andWhere('date is not null')
            //->andWhere('date/1000 BETWEEN ' . strtotime('-10 day') . ' AND '.strtotime('now') )
            ->asArray()
            ->one()) {
            $game[
                'assist'] = Asgmt::find()->from('assignments asm')
                    ->select([
                        'CONCAT(ps.name , " " , ps.surename) as name',
                        'pt.type_ru'
                    ])
                    ->join('inner join', 'personals as ps', 'ps.personal_id=asm.personal_id')
                    ->join('inner join', 'personal_type pt', 'ps.type_id=pt.id')
                    ->where(['game_id' => $game['id']])
                    ->asArray()->all();
        }
        $this->answer = $game;
    }

    public function actionGameconsist($id)
    {
        $playerIn = [];
        $playerOut = [];
        if ($game = Games::findOne($id)) {
            foreach (PlayersToGame::find()->from('pl_to_game plg')->select(
                [
                    'pl.player_id as plid',
                    'CONCAT(pl.name, " " , pl.surename) as name',
                    'pl.photo',
                    'number',
                    'ps.type'
                ])
                         ->join('inner join', 'pl_to_com plc', 'plc.player_id=plg.player_id')
                         ->join('inner join', 'players as pl', 'pl.player_id=plc.player_id')
                         ->join('inner join', 'position as ps', 'ps.position_id=plc.position_id')
                         ->where(['plc.command_id' => $game->command_id_in])->orderBy('name')->asArray()->all() as $p => $pl) {
                $pl['comm'] = 'in';
                $playerIn[$p] = $pl;

            }
            foreach (PlayersToGame::find()->from('pl_to_game plg')->select(
                [
                    'pl.player_id as plid',
                    'CONCAT(pl.name, " " , pl.surename) as name',
                    'pl.photo',
                    'number',
                    'ps.type'
                ])
                         ->join('inner join', 'pl_to_com plc', 'plc.player_id=plg.player_id')
                         ->join('inner join', 'players as pl', 'pl.player_id=plc.player_id')
                         ->join('inner join', 'position as ps', 'ps.position_id=plc.position_id')
                         ->where(['plc.command_id' => $game->command_id_out])->orderBy('name')->asArray()->all() as $p => $pl) {
                $pl['comm'] = 'out';
                $playerOut[$p] = $pl;

            }

            $this->answer = [
                'in' => $playerIn,
                'out' => $playerOut,
                'field' => 'http://api.mygame4u.com/img/field.png',
                'events' => EventsInGame::find()
                        ->select([
                            'event_id as evId',
                            'et.title',
                            'minute',
                            'et.icon',
                            'IF(events.command_id=' . $game->command_id_in . ', "up" , "down") as evType',
                        ])
                        ->join('inner join', 'events_type et', 'et.type_event_id=events.type_event_id')
                        ->where(['game_id' => $id])
                        ->orderBy('minute')
                        //->limit(10)
                        ->asArray()->all(),
                'maxmin' => (EventsInGame::find()
                        ->select([
                            'MAX(minute) as min',

                        ])
                        ->where(['game_id' => $id])
                        ->orderBy('minute')
                        //->limit(10)
                        ->asArray()->one())['min']
            ];
        } else {
            $this->error = true;
            $this->message = 'Game not found';
        }
    }

    public function actionGameevents($id)
    {
        if ($game = Games::find()
            ->select([
                'game_id',
                'tour',
                'cm_in.command_id as inId',
                'cm_out.command_id as outId',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=' . $id . ' AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
            ])
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->asArray()
            ->one()) {
            $ret = [
                'info' => [
                    'tour' => $game['tour'],
                    'in' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['inId']])->one(),
                    'out' => Commands::find()->select([
                        'title',
                        'logo',
                        'command_id'
                    ])->where(['command_id' => $game['outId']])->one()
                ],
                'score' => $game['goalIn'] . ':' . $game['goalOut'],

            ];
            $static = [];
            foreach (EventsType::find()->andWhere('type_event_id not in(5,6,14)')->all() as $k => $value) {
                $static['in'][$k] = [$value->title => EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['inId'], 'type_event_id' => $value->type_event_id])->asArray()->count()];
                $static['out'][$k] = [$value->title => EventsInGame::find()->where(['game_id' => $id, 'command_id' => $game['outId'], 'type_event_id' => $value->type_event_id])->asArray()->count()];
            }
            $ret['statistic'] = $static;
            $ret['events'] = EventsInGame::find()
                ->select([
                    'event_id as evId',
                    'minute',
                    'comment',
                    'et.icon',
                    'IF(et.type_event_id not in (5,6,14), cm.logo , null) as logo',
                    'IF(cm.command_id='.$game['inId'].', "up" , "down") as evType',
                    'ps.player_id as psId',
                    'IF(et.type_event_id not in (5,6,14), ps.name , null) as psName',
                    'pl.player_id as plId',
                    'IF(et.type_event_id not in (5,6,14),CONCAT(et.title , " - ", pl.name , " " , pl.surename) , et.title) as title',
                ])
                ->join('inner join', 'commands cm', 'cm.command_id=events.command_id')
                ->join('inner join', 'players ps', 'ps.player_id=events.assist_id')
                ->join('inner join', 'players pl', 'pl.player_id=events.player_id')
                ->join('left join', 'events_type et', 'et.type_event_id=events.type_event_id')
                ->where(['game_id' => $id])
                ->orderBy('minute')
                //->limit(10)
                ->asArray()->all();
            $this->answer = $ret;
        }
    }

    public function actionGamemedia($id, $type = 'all')
    {
        $ret = [];
        if($game = Games::find()
            ->select([
                'game_id',
                'tour',
                'cm_in.command_id as inId',
                'cm_out.command_id as outId',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.game_id=' . $id . ' AND command_id=cm_in.command_id AND `type_event_id`=1) as goalIn',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.`game_id`=' . $id . ' AND command_id=cm_out.command_id AND `type_event_id`= 1) as goalOut',
            ])
            ->where(['game_id' => intval($id)])
            ->join('inner join', 'commands as cm_in', 'cm_in.command_id=command_id_in')
            ->join('inner join', 'commands as cm_out', 'cm_out.command_id=command_id_out')
            ->asArray()
            ->one()) {

            $ret = [
                'events' => EventsInGame::find()
                ->select([
                    'event_id as evId',
                    'et.title',
                    'minute',
                    'et.icon',
                    'IF(events.command_id=' . $game['inId'] . ', "up" , "down") as evType',
                ])
                ->join('inner join', 'events_type et', 'et.type_event_id=events.type_event_id')
                ->where(['game_id' => $id])
                ->orderBy('minute')
                //->limit(10)
                ->asArray()->all(),'maxmin' => (EventsInGame::find()
                ->select([
                    'MAX(minute) as min',

                ])
                ->where(['game_id' => $id])
                ->orderBy('minute')
                //->limit(10)
                ->asArray()->one())['min']];
    }
        switch ($type) {
            case 'photo':
                $ret[$type] = GamesPhotos::find()->select(['src', 'photo_id as pId'])->where(['game_id' => $id])->asArray()->all();
                break;
            case 'video':
                $ret[$type] = GamesVideo::find()->select(['youtube_id', 'video_id as vId'])->where(['game_id' => $id])->asArray()->all();
                break;
            default:
                $ret['photo'] = GamesPhotos::find()->select(['src', 'photo_id as pId'])->where(['game_id' => $id])->asArray()->all();
                $ret['video'] = GamesVideo::find()->select(['youtube_id', 'video_id as vId'])->where(['game_id' => $id])->asArray()->all();
                break;
        }
        return $this->answer = $ret;
    }

    public function actionPlayer($id){

        $ret = ['header'=> Players::find()->select(['photo','name' , 'surename' , 'patronymic'])->where(['player_id' => $id])->asArray()->one(),'info' => [],'games'=>[]];
        if($ret['info'] = Players::find()->from('players pl')
            ->select([
                'cm.title',
                'ptc.number',
                'ps.desc',
                'pl.name',
                'pl.surename',
                'pl.birthday',
                'pl.stature',
                'pl.weight',
                'pl.leg'

            ])
            ->join('left join' , 'pl_to_com ptc' , 'ptc.player_id=pl.player_id')
            ->join('left join' , 'commands cm' , 'cm.command_id=ptc.command_id')
            ->join('inner join' , 'position ps' , 'ps.position_id=ptc.position_id')
            ->where(['pl.player_id' => $id])->asArray()->one()) {
            $ret['info']['age'] = HelpFunction::getDuration($ret['info']['birthday'], date("Y-m-d"));
        }

        if($games = PlayersToGame::find()->from('pl_to_game plg')
            ->select([
                'sea.title as seaTitle',
                'sub.title as tourTitle',
                'cm.title as comTitle',
                'cm.logo as comLogo',
                'pos.type as plPos',
                'cm.command_id as comId',
                'plc.number',
                '(SELECT COUNT(*) FROM game_statistic gst WHERE cm.command_id=gst.command_id) as gCount',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.player_id=' . $id . ' AND command_id=cm.command_id AND `type_event_id`=1) as goal',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.player_id=' . $id . ' AND command_id=cm.command_id AND `type_event_id`=12) as penalty',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.assist_id=' . $id . ' AND command_id=cm.command_id AND `assist_type_id`= 1) as assist',
                '(SELECT COUNT(*) FROM `events` as ev WHERE ev.assist_id=' . $id . ' AND command_id=cm.command_id AND `type_event_id`= 1) as score',
            ])
            ->join('inner join','games gm' , 'gm.game_id=plg.game_id')
            ->join('inner join','players pl' , 'pl.player_id=plg.player_id')
            ->join('left join' , 'pl_to_com plc' , 'plc.player_id=plg.player_id')
            ->join('left join' , 'commands cm' , 'cm.command_id=plc.command_id')
            ->join('left join' , 'position pos' , 'pos.position_id=plc.position_id')
            ->join('inner join' , 'tournaments_sub sub', 'sub.sub_tournament_id=gm.sub_tournament_id')
            ->join('inner join' , 'seasons sea', 'sea.season_id=sub.season_id')
            ->where(['plg.player_id' => $id])
            ->distinct()
            ->asArray()
            ->all()){

            foreach ($games as $k => $game) {
                $ret['games'][$k] = $game;
            }
        }

        return $this->answer = $ret;
    }

    public function actionCommand($id)
    {
        $idTour = explode(':' , $id)[0];
        $idCom = explode(':' , $id)[1];
        $ret = [];
        if($comm = Commands::find()
            ->select([
                'title',
                'logo'
            ])
            ->where(['command_id' => $idCom])->asArray()->one()){
            $ret['header'] = $comm;
        }
        $tournirs = SubTournaments::find()->select(['sub_tournament_id as subId', 'title'])->where(['season_id' => (SubTournaments::findOne($idTour))->season_id])->asArray()->all();
        $ret['season'] = Seasons::find()->select(['title'])->where(['season_id' => (SubTournaments::findOne($idTour))->season_id])->asArray()->one();
        $ret['tournirs'] = $tournirs;
        $ret['lastgames'] = self::getLastGame($idTour,$idCom);
        $ret['begingames'] = self::getFutureGames($idTour,$idCom);
        $ret['commands'] = self::getCommands($idTour);
        $date = 0;
        $countPl=0;
        foreach (PlayersInCommand::find()->select(['pl.birthday', 'pl.player_id', 'photo', "CONCAT (pl.name, ' ' , pl.surename ) as name , pl.status"])
                     ->join('inner join', 'players pl', 'pl.player_id=pl_to_com.player_id')
                     ->where(['command_id' => $idCom])->asArray()->all() as $k => $pl) {
            $players[$k] = $pl;
            $date += HelpFunction::getDuration($pl['birthday'], date("Y-m-d"));
            $countPl++;
        }
        $ret['info'] = [
            'countPl' => $countPl,
            'average' => $countPl != 0 ? intval($date / $countPl) : 0];
        $ret['consist'] = self::getPlayerByTypeInCommand($idCom);
        $ret['top'] = [
            'goal' => self::getTopPlayers($idTour ,$idCom,'goal'),
            'cart' => self::getTopPlayers($idTour ,$idCom,'cart'),
            'assist' => self::getTopPlayers($idTour ,$idCom,'assist'),
            'game' => self::getTopPlayers($idTour ,$idCom,'game')
        ];
        $ret['forms'] = self::getFormsGame($idTour,$idCom);
        $this->answer = $ret;
    }

    public function actionCommandconsist($id)
    {
        $idTour = explode(':' , $id)[0];
        $idCom = explode(':' , $id)[1];
        $ret = [];
        if($comm = Commands::find()
            ->select([
                'title',
                'logo'
            ])
            ->where(['command_id' => $idCom])->asArray()->one()){
            $ret['header'] = $comm;
        }
        $ret['consist'] = self::getPlayerFromCommand($idCom);
        $ret['lastgames'] = self::getLastGame($idTour,$idCom);
        $ret['begingames'] = self::getFutureGames($idTour,$idCom);
        $ret['commands'] = self::getCommands($idTour);
        $this->answer = $ret;
    }

    public function actionCommandcalendar($id)
    {
        $idTour = explode(':' , $id)[0];
        $idCom = explode(':' , $id)[1];
        $ret = [];
        if($comm = Commands::find()
            ->select([
                'title',
                'logo'
            ])
            ->where(['command_id' => $idCom])->asArray()->one()){
            $ret['header'] = $comm;
        }
        $ret['commands'] = self::getCommands($idTour);
        $ret['calendar'] = self::getListgames($idTour, $idCom, null,null,null,false);

        $this->answer = $ret;
    }

    public function actionCommandresult($id)
    {
        $idTour = explode(':' , $id)[0];
        $idCom = explode(':' , $id)[1];
        $ret = [];
        if($comm = Commands::find()
            ->select([
                'title',
                'logo'
            ])
            ->where(['command_id' => $idCom])->asArray()->one()){
            $ret['header'] = $comm;
        }
        $ret['commands'] = self::getCommands($idTour);
        $ret['calendar'] = self::getListgames($idTour, $idCom, null,null,'result',false);

        $this->answer = $ret;
    }
}
